[
    {
        "id": "SWC-100",
        "description": [
            "Functions that do not have a function visibility type specified are `public` by default. This can lead to a vulnerability if a developer forgot to set the visibility and a malicious user is able to make unauthorized or unintended state changes."
        ],
        "visibility_not_set.sol": "/*\n * @source: https://github.com/sigp/solidity-security-blog#visibility\n * @author: SigmaPrime\n * Modified by Gerhard Wagner\n */\n\npragma solidity ^0.4.24;\n\ncontract HashForEther {\n\n    function withdrawWinnings() {\n        // Winner if the last 8 hex characters of the address are 0.\n        require(uint32(msg.sender) == 0);\n        _sendWinnings();\n     }\n\n     function _sendWinnings() {\n         msg.sender.transfer(this.balance);\n     }\n}",
        "visibility_not_set_fixed.sol": "/*\n * @source: https://github.com/sigp/solidity-security-blog#visibility\n * @author: SigmaPrime\n * Modified by Gerhard Wagner\n */\n\npragma solidity ^0.4.24;\n\ncontract HashForEther {\n\n    function withdrawWinnings() public {\n        // Winner if the last 8 hex characters of the address are 0.\n        require(uint32(msg.sender) == 0);\n        _sendWinnings();\n     }\n\n     function _sendWinnings() internal{\n         msg.sender.transfer(this.balance);\n     }\n}"
    },
    {
        "id": "SWC-101",
        "description": [
            "An overflow/underflow happens when an arithmetic operation reaches the maximum or minimum size of a type. For instance if a number is stored in the uint8 type, it means that the number is stored in a 8 bits unsigned number ranging from 0 to 2^8-1. In computer programming, an integer overflow occurs when an arithmetic operation attempts to create a numeric value that is outside of the range that can be represented with a given number of bits â€“ either larger than the maximum or lower than the minimum representable value."
        ],
        "tokensalechallenge.sol": "/*\n * @source: https://capturetheether.com/challenges/math/token-sale/\n * @author: Steve Marx\n */\n\npragma solidity ^0.4.21;\n\ncontract TokenSaleChallenge {\n    mapping(address => uint256) public balanceOf;\n    uint256 constant PRICE_PER_TOKEN = 1 ether;\n\n    function TokenSaleChallenge(address _player) public payable {\n        require(msg.value == 1 ether);\n    }\n\n    function isComplete() public view returns (bool) {\n        return address(this).balance < 1 ether;\n    }\n\n    function buy(uint256 numTokens) public payable {\n        require(msg.value == numTokens * PRICE_PER_TOKEN);\n\n        balanceOf[msg.sender] += numTokens;\n    }\n\n    function sell(uint256 numTokens) public {\n        require(balanceOf[msg.sender] >= numTokens);\n\n        balanceOf[msg.sender] -= numTokens;\n        msg.sender.transfer(numTokens * PRICE_PER_TOKEN);\n    }\n}",
        "integer_overflow_mapping_sym_1.sol": "//Single transaction overflow\n\npragma solidity ^0.4.11;\n\ncontract IntegerOverflowMappingSym1 {\n    mapping(uint256 => uint256) map;\n\n    function init(uint256 k, uint256 v) public {\n        map[k] -= v;\n    }\n}",
        "integer_overflow_mapping_sym_1_fixed.sol": "//Single transaction overflow\n//Safe version\n\npragma solidity ^0.4.16;\n\ncontract IntegerOverflowMappingSym1 {\n    mapping(uint256 => uint256) map;\n\n    function init(uint256 k, uint256 v) public {\n        map[k] = sub(map[k], v);\n    }\n\n    //from SafeMath\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a);//SafeMath uses assert here\n        return a - b;\n    }\n}",
        "integer_overflow_minimal.sol": "//Single transaction overflow\n//Post-transaction effect: overflow escapes to publicly-readable storage\n\npragma solidity ^0.4.19;\n\ncontract IntegerOverflowMinimal {\n    uint public count = 1;\n\n    function run(uint256 input) public {\n        count -= input;\n    }\n}",
        "integer_overflow_minimal_fixed.sol": "//Single transaction overflow\n//Post-transaction effect: overflow escapes to publicly-readable storage\n//Safe version\n\npragma solidity ^0.4.19;\n\ncontract IntegerOverflowMinimal {\n    uint public count = 1;\n\n    function run(uint256 input) public {\n        count = sub(count,input);\n    }\n\n    //from SafeMath\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a);//SafeMath uses assert here\n        return a - b;\n    }\n}",
        "integer_overflow_mul.sol": "//Single transaction overflow\n//Post-transaction effect: overflow escapes to publicly-readable storage\n\npragma solidity ^0.4.19;\n\ncontract IntegerOverflowMul {\n    uint public count = 2;\n\n    function run(uint256 input) public {\n        count *= input;\n    }\n}",
        "integer_overflow_mul_fixed.sol": "//Single transaction overflow\n//Post-transaction effect: overflow escapes to publicly-readable storage\n//Safe version\n\npragma solidity ^0.4.19;\n\ncontract IntegerOverflowMul {\n    uint public count = 2;\n\n    function run(uint256 input) public {\n        count = mul(count, input);\n    }\n\n    //from SafeMath\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n      // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n      // benefit is lost if 'b' is also tested.\n      // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n      if (a == 0) {\n        return 0;\n      }\n\n      uint256 c = a * b;\n      require(c / a == b);\n\n      return c;\n    }\n}",
        "integer_overflow_multitx_multifunc_feasible.sol": "/*\n * @source: https://github.com/ConsenSys/evm-analyzer-benchmark-suite\n * @author: Suhabe Bugrara\n */\n\n//Multi-transactional, multi-function\n//Arithmetic instruction reachable\n\npragma solidity ^0.4.23;\n\ncontract IntegerOverflowMultiTxMultiFuncFeasible {\n    uint256 private initialized = 0;\n    uint256 public count = 1;\n\n    function init() public {\n        initialized = 1;\n    }\n\n    function run(uint256 input) {\n        if (initialized == 0) {\n            return;\n        }\n\n        count -= input;\n    }\n}",
        "integer_overflow_multitx_multifunc_feasible_fixed.sol": "/*\n * @source: https://github.com/ConsenSys/evm-analyzer-benchmark-suite\n * @author: Suhabe Bugrara\n */\n\n//Multi-transactional, multi-function\n//Arithmetic instruction reachable (Safe)\n\npragma solidity ^0.4.23;\n\ncontract IntegerOverflowMultiTxMultiFuncFeasible {\n    uint256 private initialized = 0;\n    uint256 public count = 1;\n\n    function init() public {\n        initialized = 1;\n    }\n\n    function run(uint256 input) {\n        if (initialized == 0) {\n            return;\n        }\n\n        count = sub(count, input);\n    }\n\n    //from SafeMath\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a);//SafeMath uses assert here\n        return a - b;\n    }\n}",
        "integer_overflow_multitx_onefunc_feasible.sol": "/*\n * @source: https://github.com/ConsenSys/evm-analyzer-benchmark-suite\n * @author: Suhabe Bugrara\n */\n\n//Multi-transactional, single function\n//Arithmetic instruction reachable\n\npragma solidity ^0.4.23;\n\ncontract IntegerOverflowMultiTxOneFuncFeasible {\n    uint256 private initialized = 0;\n    uint256 public count = 1;\n\n    function run(uint256 input) public {\n        if (initialized == 0) {\n            initialized = 1;\n            return;\n        }\n\n        count -= input;\n    }\n}",
        "integer_overflow_multitx_onefunc_feasible_fixed.sol": "/*\n * @source: https://github.com/ConsenSys/evm-analyzer-benchmark-suite\n * @author: Suhabe Bugrara\n */\n\n//Multi-transactional, single function\n//Arithmetic instruction reachable (Safe)\n\npragma solidity ^0.4.23;\n\ncontract IntegerOverflowMultiTxOneFuncFeasible {\n\n    uint256 private initialized = 0;\n    uint256 public count = 1;\n\n    function run(uint256 input) public {\n        if (initialized == 0) {\n            initialized = 1;\n            return;\n        }\n\n        count = sub(count, input);\n    }\n\n    //from SafeMath\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a);//SafeMath uses assert here\n        return a - b;\n    }\n}",
        "integer_overflow_multitx_onefunc_infeasible.sol": "/*\n * @source: https://github.com/ConsenSys/evm-analyzer-benchmark-suite\n * @author: Suhabe Bugrara\n */\n\n//Multi-transactional, single function\n//Overflow infeasible because arithmetic instruction not reachable\n\npragma solidity ^0.4.23;\n\ncontract IntegerOverflowMultiTxOneFuncInfeasible {\n    uint256 private initialized = 0;\n    uint256 public count = 1;\n\n    function run(uint256 input) public {\n        if (initialized == 0) {\n            return;\n        }\n\n        count -= input;\n    }\n}",
        "overflow_simple_add.sol": "pragma solidity 0.4.24;\n\ncontract Overflow_Add {\n    uint public balance = 1;\n\n    function add(uint256 deposit) public {\n        balance += deposit;\n    }\n}",
        "overflow_simple_add_fixed.sol": "pragma solidity ^0.4.24;\n\ncontract Overflow_Add {\n    uint public balance = 1;\n\n    function add(uint256 deposit) public {\n        balance = add(balance, deposit);\n    }\n\n    //from SafeMath\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n      uint256 c = a + b;\n      require(c >= a);\n\n      return c;\n    }\n}",
        "BECToken.sol": "pragma solidity ^0.4.16;\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n    uint256 c = a * b;\n    require(a == 0 || c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n    // require(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // require(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n    require(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n    uint256 c = a + b;\n    require(c >= a);\n    return c;\n  }\n}\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  uint256 public totalSupply;\n  function balanceOf(address who) public constant returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n */\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n\n  /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value > 0 && _value <= balances[msg.sender]);\n\n    // SafeMath.sub will throw if there is not enough balance.\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public constant returns (uint256 balance) {\n    return balances[_owner];\n  }\n}\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) public constant returns (uint256);\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * @dev https://github.com/ethereum/EIPs/issues/20\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) internal allowed;\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value > 0 && _value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   *\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n    return allowed[_owner][_spender];\n  }\n}\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() {\n    owner = msg.sender;\n  }\n\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) onlyOwner public {\n    require(newOwner != address(0));\n    OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n\n}\n\n/**\n * @title Pausable\n * @dev Base contract which allows children to implement an emergency stop mechanism.\n */\ncontract Pausable is Ownable {\n  event Pause();\n  event Unpause();\n\n  bool public paused = false;\n\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is not paused.\n   */\n  modifier whenNotPaused() {\n    require(!paused);\n    _;\n  }\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is paused.\n   */\n  modifier whenPaused() {\n    require(paused);\n    _;\n  }\n\n  /**\n   * @dev called by the owner to pause, triggers stopped state\n   */\n  function pause() onlyOwner whenNotPaused public {\n    paused = true;\n    Pause();\n  }\n\n  /**\n   * @dev called by the owner to unpause, returns to normal state\n   */\n  function unpause() onlyOwner whenPaused public {\n    paused = false;\n    Unpause();\n  }\n}\n\n/**\n * @title Pausable token\n *\n * @dev StandardToken modified with pausable transfers.\n **/\n\ncontract PausableToken is StandardToken, Pausable {\n\n  function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {\n    return super.transfer(_to, _value);\n  }\n\n  function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {\n    return super.transferFrom(_from, _to, _value);\n  }\n\n  function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {\n    return super.approve(_spender, _value);\n  }\n\n  function batchTransfer(address[] _receivers, uint256 _value) public whenNotPaused returns (bool) {\n    uint cnt = _receivers.length;\n    uint256 amount = uint256(cnt) * _value;\n    require(cnt > 0 && cnt <= 20);\n    require(_value > 0 && balances[msg.sender] >= amount);\n\n    balances[msg.sender] = balances[msg.sender].sub(amount);\n    for (uint i = 0; i < cnt; i++) {\n        balances[_receivers[i]] = balances[_receivers[i]].add(_value);\n        Transfer(msg.sender, _receivers[i], _value);\n    }\n    return true;\n  }\n}\n\n/**\n * @title Bec Token\n *\n * @dev Implementation of Bec Token based on the basic standard token.\n */\ncontract BecToken is PausableToken {\n    /**\n    * Public variables of the token\n    * The following variables are OPTIONAL vanities. One does not have to include them.\n    * They allow one to customise the token contract & in no way influences the core functionality.\n    * Some wallets/interfaces might not even bother to look at this information.\n    */\n    string public name = \"BeautyChain\";\n    string public symbol = \"BEC\";\n    string public version = '1.0.0';\n    uint8 public decimals = 18;\n\n    /**\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n     */\n    function BecToken() {\n      totalSupply = 7000000000 * (10**(uint256(decimals)));\n      balances[msg.sender] = totalSupply;    // Give the creator all initial tokens\n    }\n\n    function () {\n        //if ether is sent to this address, send it back.\n        revert();\n    }\n}"
    },
    {
        "id": "SWC-102",
        "description": [
            "Using an outdated compiler version can be problematic especially if there are publicly disclosed bugs and issues that affect the current compiler version."
        ],
        "version_0_4_13.sol": "pragma solidity 0.4.13;\n\ncontract OutdatedCompilerVersion {\n    uint public x = 1;\n}"
    },
    {
        "id": "SWC-103",
        "description": [
            "Contracts should be deployed with the same compiler version and flags that they have been tested with thoroughly. Locking the pragma helps to ensure that contracts do not accidentally get deployed using, for example, an outdated compiler version that might introduce bugs that affect the contract system negatively."
        ],
        "floating_pragma.sol": "pragma solidity ^0.4.0;\n\ncontract PragmaNotLocked {\n    uint public x = 1;\n}",
        "floating_pragma_fixed.sol": "pragma solidity 0.4.25;\n\ncontract PragmaFixed {\n    uint public x = 1;\n}",
        "no_pragma.sol": "contract PragmaNotLocked {\n    uint public x = 1;\n}",
        "semver_floating_pragma.sol": "pragma solidity >=0.4.0 < 0.6.0;\npragma solidity >=0.4.0<0.6.0;\npragma solidity >=0.4.14 <0.6.0;\npragma solidity >0.4.13 <0.6.0;\npragma solidity 0.4.24 - 0.5.2;\npragma solidity >=0.4.24 <=0.5.3 ~0.4.20;\npragma solidity <0.4.26;\npragma solidity ~0.4.20;\npragma solidity ^0.4.14;\npragma solidity 0.4.*;\npragma solidity 0.*;\npragma solidity *;\npragma solidity 0.4;\npragma solidity 0;\n\ncontract SemVerFloatingPragma {\n}",
        "semver_floating_pragma_fixed.sol": "pragma solidity 0.4.25;\n// or\npragma solidity =0.4.25;\n\ncontract SemVerFloatingPragmaFixed {\n}"
    },
    {
        "id": "SWC-104",
        "description": [
            "The return value of a message call is not checked. Execution will resume even if the called contract throws an exception. If the call fails accidentally or an attacker forces the call to fail, this may cause unexpected behaviour in the subsequent program logic."
        ],
        "unchecked_return_value.sol": "pragma solidity 0.4.25;\n\ncontract ReturnValue {\n\n  function callchecked(address callee) public {\n  \trequire(callee.call());\n  }\n\n  function callnotchecked(address callee) public {\n    callee.call();\n  }\n}"
    },
    {
        "id": "SWC-105",
        "description": [
            "Due to missing or insufficient access controls, malicious parties can withdraw some or all Ether from the contract account.\n\nThis bug is sometimes caused by unintentionally exposing initialization functions. By wrongly naming a function intended to be a constructor, the constructor code ends up in the runtime byte code and can be called by anyone to re-initialize the contract."
        ],
        "tokensalechallenge.sol": "/*\n * @source: https://capturetheether.com/challenges/math/token-sale/\n * @author: Steve Marx\n */\n\npragma solidity ^0.4.21;\n\ncontract TokenSaleChallenge {\n    mapping(address => uint256) public balanceOf;\n    uint256 constant PRICE_PER_TOKEN = 1 ether;\n\n    function TokenSaleChallenge(address _player) public payable {\n        require(msg.value == 1 ether);\n    }\n\n    function isComplete() public view returns (bool) {\n        return address(this).balance < 1 ether;\n    }\n\n    function buy(uint256 numTokens) public payable {\n        require(msg.value == numTokens * PRICE_PER_TOKEN);\n\n        balanceOf[msg.sender] += numTokens;\n    }\n\n    function sell(uint256 numTokens) public {\n        require(balanceOf[msg.sender] >= numTokens);\n\n        balanceOf[msg.sender] -= numTokens;\n        msg.sender.transfer(numTokens * PRICE_PER_TOKEN);\n    }\n}",
        "rubixi.sol": "pragma solidity ^0.4.22;\n\ncontract Rubixi {\n\n        //Declare variables for storage critical to contract\n        uint private balance = 0;\n        uint private collectedFees = 0;\n        uint private feePercent = 10;\n        uint private pyramidMultiplier = 300;\n        uint private payoutOrder = 0;\n\n        address private creator;\n\n        //Sets creator\n        function DynamicPyramid() {\n                creator = msg.sender;\n        }\n\n        modifier onlyowner {\n                if (msg.sender == creator) _;\n        }\n\n        struct Participant {\n                address etherAddress;\n                uint payout;\n        }\n\n        Participant[] private participants;\n\n        //Fallback function\n        function() {\n                init();\n        }\n\n        //init function run on fallback\n        function init() private {\n                //Ensures only tx with value of 1 ether or greater are processed and added to pyramid\n                if (msg.value < 1 ether) {\n                        collectedFees += msg.value;\n                        return;\n                }\n\n                uint _fee = feePercent;\n                //50% fee rebate on any ether value of 50 or greater\n                if (msg.value >= 50 ether) _fee /= 2;\n\n                addPayout(_fee);\n        }\n\n        //Function called for valid tx to the contract\n        function addPayout(uint _fee) private {\n                //Adds new address to participant array\n                participants.push(Participant(msg.sender, (msg.value * pyramidMultiplier) / 100));\n\n                //These statements ensure a quicker payout system to later pyramid entrants, so the pyramid has a longer lifespan\n                if (participants.length == 10) pyramidMultiplier = 200;\n                else if (participants.length == 25) pyramidMultiplier = 150;\n\n                // collect fees and update contract balance\n                balance += (msg.value * (100 - _fee)) / 100;\n                collectedFees += (msg.value * _fee) / 100;\n\n                //Pays earlier participiants if balance sufficient\n                while (balance > participants[payoutOrder].payout) {\n                        uint payoutToSend = participants[payoutOrder].payout;\n                        participants[payoutOrder].etherAddress.send(payoutToSend);\n\n                        balance -= participants[payoutOrder].payout;\n                        payoutOrder += 1;\n                }\n        }\n\n        //Fee functions for creator\n        function collectAllFees() onlyowner {\n                if (collectedFees == 0) throw;\n\n                creator.send(collectedFees);\n                collectedFees = 0;\n        }\n\n        function collectFeesInEther(uint _amt) onlyowner {\n                _amt *= 1 ether;\n                if (_amt > collectedFees) collectAllFees();\n\n                if (collectedFees == 0) throw;\n\n                creator.send(_amt);\n                collectedFees -= _amt;\n        }\n\n        function collectPercentOfFees(uint _pcent) onlyowner {\n                if (collectedFees == 0 || _pcent > 100) throw;\n\n                uint feesToCollect = collectedFees / 100 * _pcent;\n                creator.send(feesToCollect);\n                collectedFees -= feesToCollect;\n        }\n\n        //Functions for changing variables related to the contract\n        function changeOwner(address _owner) onlyowner {\n                creator = _owner;\n        }\n\n        function changeMultiplier(uint _mult) onlyowner {\n                if (_mult > 300 || _mult < 120) throw;\n\n                pyramidMultiplier = _mult;\n        }\n\n        function changeFeePercentage(uint _fee) onlyowner {\n                if (_fee > 10) throw;\n\n                feePercent = _fee;\n        }\n\n        //Functions to provide information to end-user using JSON interface or other interfaces\n        function currentMultiplier() constant returns(uint multiplier, string info) {\n                multiplier = pyramidMultiplier;\n                info = 'This multiplier applies to you as soon as transaction is received, may be lowered to hasten payouts or increased if payouts are fast enough. Due to no float or decimals, multiplier is x100 for a fractional multiplier e.g. 250 is actually a 2.5x multiplier. Capped at 3x max and 1.2x min.';\n        }\n\n        function currentFeePercentage() constant returns(uint fee, string info) {\n                fee = feePercent;\n                info = 'Shown in % form. Fee is halved(50%) for amounts equal or greater than 50 ethers. (Fee may change, but is capped to a maximum of 10%)';\n        }\n\n        function currentPyramidBalanceApproximately() constant returns(uint pyramidBalance, string info) {\n                pyramidBalance = balance / 1 ether;\n                info = 'All balance values are measured in Ethers, note that due to no decimal placing, these values show up as integers only, within the contract itself you will get the exact decimal value you are supposed to';\n        }\n\n        function nextPayoutWhenPyramidBalanceTotalsApproximately() constant returns(uint balancePayout) {\n                balancePayout = participants[payoutOrder].payout / 1 ether;\n        }\n\n        function feesSeperateFromBalanceApproximately() constant returns(uint fees) {\n                fees = collectedFees / 1 ether;\n        }\n\n        function totalParticipants() constant returns(uint count) {\n                count = participants.length;\n        }\n\n        function numberOfParticipantsWaitingForPayout() constant returns(uint count) {\n                count = participants.length - payoutOrder;\n        }\n\n        function participantDetails(uint orderInPyramid) constant returns(address Address, uint Payout) {\n                if (orderInPyramid <= participants.length) {\n                        Address = participants[orderInPyramid].etherAddress;\n                        Payout = participants[orderInPyramid].payout / 1 ether;\n                }\n        }\n}",
        "multiowned_not_vulnerable.sol": "pragma solidity ^0.4.23;\n\n/**\n * @title MultiOwnable\n */\ncontract MultiOwnable {\n  address public root;\n  mapping (address => address) public owners; // owner => parent of owner\n\n  /**\n  * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n  * account.\n  */\n  constructor() public {\n    root = msg.sender;\n    owners[root] = root;\n  }\n\n  /**\n  * @dev Throws if called by any account other than the owner.\n  */\n  modifier onlyOwner() {\n    require(owners[msg.sender] != 0);\n    _;\n  }\n\n  /**\n  * @dev Adding new owners\n  * Note that the \"onlyOwner\" modifier is used here.\n  */\n  function newOwner(address _owner) onlyOwner external returns (bool) {\n    require(_owner != 0);\n    owners[_owner] = msg.sender;\n    return true;\n  }\n\n  /**\n    * @dev Deleting owners\n    */\n  function deleteOwner(address _owner) onlyOwner external returns (bool) {\n    require(owners[_owner] == msg.sender || (owners[_owner] != 0 && msg.sender == root));\n    owners[_owner] = 0;\n    return true;\n  }\n}\n\ncontract TestContract is MultiOwnable {\n\n  function withdrawAll() onlyOwner {\n    msg.sender.transfer(this.balance);\n  }\n\n  function() payable {\n  }\n\n}",
        "multiowned_vulnerable.sol": "pragma solidity ^0.4.23;\n\n/**\n * @title MultiOwnable\n */\ncontract MultiOwnable {\n  address public root;\n  mapping (address => address) public owners; // owner => parent of owner\n\n  /**\n  * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n  * account.\n  */\n  constructor() public {\n    root = msg.sender;\n    owners[root] = root;\n  }\n\n  /**\n  * @dev Throws if called by any account other than the owner.\n  */\n  modifier onlyOwner() {\n    require(owners[msg.sender] != 0);\n    _;\n  }\n\n  /**\n  * @dev Adding new owners\n  * Note that the \"onlyOwner\" modifier is missing here.\n  */\n  function newOwner(address _owner) external returns (bool) {\n    require(_owner != 0);\n    owners[_owner] = msg.sender;\n    return true;\n  }\n\n  /**\n    * @dev Deleting owners\n    */\n  function deleteOwner(address _owner) onlyOwner external returns (bool) {\n    require(owners[_owner] == msg.sender || (owners[_owner] != 0 && msg.sender == root));\n    owners[_owner] = 0;\n    return true;\n  }\n}\n\ncontract TestContract is MultiOwnable {\n\n  function withdrawAll() onlyOwner {\n    msg.sender.transfer(this.balance);\n  }\n\n  function() payable {\n  }\n\n}",
        "simple_ether_drain.sol": "pragma solidity ^0.4.22;\n\ncontract SimpleEtherDrain {\n\n  function withdrawAllAnyone() {\n    msg.sender.transfer(this.balance);\n  }\n\n  function () public payable {\n  }\n\n}",
        "wallet_01_ok.sol": "pragma solidity ^0.4.24;\n\n/* User can add pay in and withdraw Ether.\n   Nobody can withdraw more Ether than they paid in.\n*/\n\ncontract Wallet {\n    address creator;\n\n    mapping(address => uint256) balances;\n\n    constructor() public {\n        creator = msg.sender;\n    }\n\n    function deposit() public payable {\n    \tassert(balances[msg.sender] + msg.value > balances[msg.sender]);\n        balances[msg.sender] += msg.value;\n    }\n\n    function withdraw(uint256 amount) public {\n        require(amount <= balances[msg.sender]);\n        msg.sender.transfer(amount);\n        balances[msg.sender] -= amount;\n    }\n\n    function refund() public {\n        msg.sender.transfer(balances[msg.sender]);\n        balances[msg.sender] = 0;\n    }\n\n    // In an emergency the owner can migrate  allfunds to a different address.\n\n    function migrateTo(address to) public {\n        require(creator == msg.sender);\n        to.transfer(this.balance);\n    }\n\n}",
        "wallet_02_refund_nosub.sol": "pragma solidity ^0.4.24;\n\n/* User can add pay in and withdraw Ether.\n   Unfortunately the developer forgot set the user's balance to 0 when refund() is called.\n   An attacker can pay in a small amount of Ether and call refund() repeatedly to empty the contract.\n*/\n\ncontract Wallet {\n    address creator;\n\n    mapping(address => uint256) balances;\n\n    constructor() public {\n        creator = msg.sender;\n    }\n\n    function deposit() public payable {\n    \tassert(balances[msg.sender] + msg.value > balances[msg.sender]);\n        balances[msg.sender] += msg.value;\n    }\n\n    function withdraw(uint256 amount) public {\n        require(amount <= balances[msg.sender]);\n        msg.sender.transfer(amount);\n        balances[msg.sender] -= amount;\n    }\n\n    function refund() public {\n        msg.sender.transfer(balances[msg.sender]);\n    }\n\n    // In an emergency the owner can migrate  allfunds to a different address.\n\n    function migrateTo(address to) public {\n        require(creator == msg.sender);\n        to.transfer(this.balance);\n    }\n\n}",
        "wallet_03_wrong_constructor.sol": "pragma solidity ^0.4.24;\n\n/* User can add pay in and withdraw Ether.\n   The constructor is wrongly named, so anyone can become 'creator' and withdraw all funds.\n*/\n\ncontract Wallet {\n    address creator;\n\n    mapping(address => uint256) balances;\n\n    function initWallet() public {\n        creator = msg.sender;\n    }\n\n    function deposit() public payable {\n    \tassert(balances[msg.sender] + msg.value > balances[msg.sender]);\n        balances[msg.sender] += msg.value;\n    }\n\n    function withdraw(uint256 amount) public {\n        require(amount <= balances[msg.sender]);\n        msg.sender.transfer(amount);\n        balances[msg.sender] -= amount;\n    }\n\n    // In an emergency the owner can migrate  allfunds to a different address.\n\n    function migrateTo(address to) public {\n        require(creator == msg.sender);\n        to.transfer(this.balance);\n    }\n\n}",
        "wallet_04_confused_sign.sol": "pragma solidity ^0.4.24;\n\n/* User can add pay in and withdraw Ether.\n   Unfortunately, the developer was drunk and used the wrong comparison operator in \"withdraw()\"\n   Anybody can withdraw arbitrary amounts of Ether :()\n*/\n\ncontract Wallet {\n    address creator;\n\n    mapping(address => uint256) balances;\n\n    constructor() public {\n        creator = msg.sender;\n    }\n\n    function deposit() public payable {\n    \tassert(balances[msg.sender] + msg.value > balances[msg.sender]);\n        balances[msg.sender] += msg.value;\n    }\n\n    function withdraw(uint256 amount) public {\n        require(amount >= balances[msg.sender]);\n        msg.sender.transfer(amount);\n        balances[msg.sender] -= amount;\n    }\n\n    // In an emergency the owner can migrate  allfunds to a different address.\n\n    function migrateTo(address to) public {\n        require(creator == msg.sender);\n        to.transfer(this.balance);\n    }\n\n}"
    },
    {
        "id": "SWC-106",
        "description": [
            "Due to missing or insufficient access controls, malicious parties can self-destruct the contract."
        ],
        "WalletLibrary.sol": "//sol Wallet\n// Multi-sig, daily-limited account proxy/wallet.\n// @authors:\n// Gav Wood <g@ethdev.com>\n// inheritable \"property\" contract that enables methods to be protected by requiring the acquiescence of either a\n// single, or, crucially, each of a number of, designated owners.\n// usage:\n// use modifiers onlyowner (just own owned) or onlymanyowners(hash), whereby the same hash must be provided by\n// some number (specified in constructor) of the set of owners (specified in the constructor, modifiable) before the\n// interior is executed.\n\npragma solidity ^0.4.9;\n\ncontract WalletEvents {\n  // EVENTS\n\n  // this contract only has six types of events: it can accept a confirmation, in which case\n  // we record owner and operation (hash) alongside it.\n  event Confirmation(address owner, bytes32 operation);\n  event Revoke(address owner, bytes32 operation);\n\n  // some others are in the case of an owner changing.\n  event OwnerChanged(address oldOwner, address newOwner);\n  event OwnerAdded(address newOwner);\n  event OwnerRemoved(address oldOwner);\n\n  // the last one is emitted if the required signatures change\n  event RequirementChanged(uint newRequirement);\n\n  // Funds has arrived into the wallet (record how much).\n  event Deposit(address _from, uint value);\n  // Single transaction going out of the wallet (record who signed for it, how much, and to whom it's going).\n  event SingleTransact(address owner, uint value, address to, bytes data, address created);\n  // Multi-sig transaction going out of the wallet (record who signed for it last, the operation hash, how much, and to whom it's going).\n  event MultiTransact(address owner, bytes32 operation, uint value, address to, bytes data, address created);\n  // Confirmation still needed for a transaction.\n  event ConfirmationNeeded(bytes32 operation, address initiator, uint value, address to, bytes data);\n}\n\ncontract WalletAbi {\n  // Revokes a prior confirmation of the given operation\n  function revoke(bytes32 _operation) external;\n\n  // Replaces an owner `_from` with another `_to`.\n  function changeOwner(address _from, address _to) external;\n\n  function addOwner(address _owner) external;\n\n  function removeOwner(address _owner) external;\n\n  function changeRequirement(uint _newRequired) external;\n\n  function isOwner(address _addr) constant returns (bool);\n\n  function hasConfirmed(bytes32 _operation, address _owner) external constant returns (bool);\n\n  // (re)sets the daily limit. needs many of the owners to confirm. doesn't alter the amount already spent today.\n  function setDailyLimit(uint _newLimit) external;\n\n  function execute(address _to, uint _value, bytes _data) external returns (bytes32 o_hash);\n  function confirm(bytes32 _h) returns (bool o_success);\n}\n\ncontract WalletLibrary is WalletEvents {\n  // TYPES\n\n  // struct for the status of a pending operation.\n  struct PendingState {\n    uint yetNeeded;\n    uint ownersDone;\n    uint index;\n  }\n\n  // Transaction structure to remember details of transaction lest it need be saved for a later call.\n  struct Transaction {\n    address to;\n    uint value;\n    bytes data;\n  }\n\n  // MODIFIERS\n\n  // simple single-sig function modifier.\n  modifier onlyowner {\n    if (isOwner(msg.sender))\n      _;\n  }\n  // multi-sig function modifier: the operation must have an intrinsic hash in order\n  // that later attempts can be realised as the same underlying operation and\n  // thus count as confirmations.\n  modifier onlymanyowners(bytes32 _operation) {\n    if (confirmAndCheck(_operation))\n      _;\n  }\n\n  // METHODS\n\n  // gets called when no other function matches\n  function() payable {\n    // just being sent some cash?\n    if (msg.value > 0)\n      Deposit(msg.sender, msg.value);\n  }\n\n  // constructor is given number of sigs required to do protected \"onlymanyowners\" transactions\n  // as well as the selection of addresses capable of confirming them.\n  function initMultiowned(address[] _owners, uint _required) only_uninitialized {\n    m_numOwners = _owners.length + 1;\n    m_owners[1] = uint(msg.sender);\n    m_ownerIndex[uint(msg.sender)] = 1;\n    for (uint i = 0; i < _owners.length; ++i)\n    {\n      m_owners[2 + i] = uint(_owners[i]);\n      m_ownerIndex[uint(_owners[i])] = 2 + i;\n    }\n    m_required = _required;\n  }\n\n  // Revokes a prior confirmation of the given operation\n  function revoke(bytes32 _operation) external {\n    uint ownerIndex = m_ownerIndex[uint(msg.sender)];\n    // make sure they're an owner\n    if (ownerIndex == 0) return;\n    uint ownerIndexBit = 2**ownerIndex;\n    var pending = m_pending[_operation];\n    if (pending.ownersDone & ownerIndexBit > 0) {\n      pending.yetNeeded++;\n      pending.ownersDone -= ownerIndexBit;\n      Revoke(msg.sender, _operation);\n    }\n  }\n\n  // Replaces an owner `_from` with another `_to`.\n  function changeOwner(address _from, address _to) onlymanyowners(sha3(msg.data)) external {\n    if (isOwner(_to)) return;\n    uint ownerIndex = m_ownerIndex[uint(_from)];\n    if (ownerIndex == 0) return;\n\n    clearPending();\n    m_owners[ownerIndex] = uint(_to);\n    m_ownerIndex[uint(_from)] = 0;\n    m_ownerIndex[uint(_to)] = ownerIndex;\n    OwnerChanged(_from, _to);\n  }\n\n  function addOwner(address _owner) onlymanyowners(sha3(msg.data)) external {\n    if (isOwner(_owner)) return;\n\n    clearPending();\n    if (m_numOwners >= c_maxOwners)\n      reorganizeOwners();\n    if (m_numOwners >= c_maxOwners)\n      return;\n    m_numOwners++;\n    m_owners[m_numOwners] = uint(_owner);\n    m_ownerIndex[uint(_owner)] = m_numOwners;\n    OwnerAdded(_owner);\n  }\n\n  function removeOwner(address _owner) onlymanyowners(sha3(msg.data)) external {\n    uint ownerIndex = m_ownerIndex[uint(_owner)];\n    if (ownerIndex == 0) return;\n    if (m_required > m_numOwners - 1) return;\n\n    m_owners[ownerIndex] = 0;\n    m_ownerIndex[uint(_owner)] = 0;\n    clearPending();\n    reorganizeOwners(); //make sure m_numOwner is equal to the number of owners and always points to the optimal free slot\n    OwnerRemoved(_owner);\n  }\n\n  function changeRequirement(uint _newRequired) onlymanyowners(sha3(msg.data)) external {\n    if (_newRequired > m_numOwners) return;\n    m_required = _newRequired;\n    clearPending();\n    RequirementChanged(_newRequired);\n  }\n\n  // Gets an owner by 0-indexed position (using numOwners as the count)\n  function getOwner(uint ownerIndex) external constant returns (address) {\n    return address(m_owners[ownerIndex + 1]);\n  }\n\n  function isOwner(address _addr) constant returns (bool) {\n    return m_ownerIndex[uint(_addr)] > 0;\n  }\n\n  function hasConfirmed(bytes32 _operation, address _owner) external constant returns (bool) {\n    var pending = m_pending[_operation];\n    uint ownerIndex = m_ownerIndex[uint(_owner)];\n\n    // make sure they're an owner\n    if (ownerIndex == 0) return false;\n\n    // determine the bit to set for this owner.\n    uint ownerIndexBit = 2**ownerIndex;\n    return !(pending.ownersDone & ownerIndexBit == 0);\n  }\n\n  // constructor - stores initial daily limit and records the present day's index.\n  function initDaylimit(uint _limit) only_uninitialized {\n    m_dailyLimit = _limit;\n    m_lastDay = today();\n  }\n  // (re)sets the daily limit. needs many of the owners to confirm. doesn't alter the amount already spent today.\n  function setDailyLimit(uint _newLimit) onlymanyowners(sha3(msg.data)) external {\n    m_dailyLimit = _newLimit;\n  }\n  // resets the amount already spent today. needs many of the owners to confirm.\n  function resetSpentToday() onlymanyowners(sha3(msg.data)) external {\n    m_spentToday = 0;\n  }\n\n  // throw unless the contract is not yet initialized.\n  modifier only_uninitialized { if (m_numOwners > 0) throw; _; }\n\n  // constructor - just pass on the owner array to the multiowned and\n  // the limit to daylimit\n  function initWallet(address[] _owners, uint _required, uint _daylimit) only_uninitialized {\n    initDaylimit(_daylimit);\n    initMultiowned(_owners, _required);\n  }\n\n  // kills the contract sending everything to `_to`.\n  function kill(address _to) onlymanyowners(sha3(msg.data)) external {\n    suicide(_to);\n  }\n\n  // Outside-visible transact entry point. Executes transaction immediately if below daily spend limit.\n  // If not, goes into multisig process. We provide a hash on return to allow the sender to provide\n  // shortcuts for the other confirmations (allowing them to avoid replicating the _to, _value\n  // and _data arguments). They still get the option of using them if they want, anyways.\n  function execute(address _to, uint _value, bytes _data) external onlyowner returns (bytes32 o_hash) {\n    // first, take the opportunity to check that we're under the daily limit.\n    if ((_data.length == 0 && underLimit(_value)) || m_required == 1) {\n      // yes - just execute the call.\n      address created;\n      if (_to == 0) {\n        created = create(_value, _data);\n      } else {\n        if (!_to.call.value(_value)(_data))\n          throw;\n      }\n      SingleTransact(msg.sender, _value, _to, _data, created);\n    } else {\n      // determine our operation hash.\n      o_hash = sha3(msg.data, block.number);\n      // store if it's new\n      if (m_txs[o_hash].to == 0 && m_txs[o_hash].value == 0 && m_txs[o_hash].data.length == 0) {\n        m_txs[o_hash].to = _to;\n        m_txs[o_hash].value = _value;\n        m_txs[o_hash].data = _data;\n      }\n      if (!confirm(o_hash)) {\n        ConfirmationNeeded(o_hash, msg.sender, _value, _to, _data);\n      }\n    }\n  }\n\n  function create(uint _value, bytes _code) internal returns (address o_addr) {\n    /*\n    assembly {\n      o_addr := create(_value, add(_code, 0x20), mload(_code))\n      jumpi(invalidJumpLabel, iszero(extcodesize(o_addr)))\n    }\n    */\n  }\n\n  //confirm a transaction through just the hash. we use the previous transactions map, m_txs, in order\n  // to determine the body of the transaction from the hash provided.\n  function confirm(bytes32 _h) onlymanyowners(_h) returns (bool o_success) {\n    if (m_txs[_h].to != 0 || m_txs[_h].value != 0 || m_txs[_h].data.length != 0) {\n      address created;\n      if (m_txs[_h].to == 0) {\n        created = create(m_txs[_h].value, m_txs[_h].data);\n      } else {\n        if (!m_txs[_h].to.call.value(m_txs[_h].value)(m_txs[_h].data))\n          throw;\n      }\n\n      MultiTransact(msg.sender, _h, m_txs[_h].value, m_txs[_h].to, m_txs[_h].data, created);\n      delete m_txs[_h];\n      return true;\n    }\n  }\n\n  // INTERNAL METHODS\n\n  function confirmAndCheck(bytes32 _operation) internal returns (bool) {\n    // determine what index the present sender is:\n    uint ownerIndex = m_ownerIndex[uint(msg.sender)];\n    // make sure they're an owner\n    if (ownerIndex == 0) return;\n\n    var pending = m_pending[_operation];\n    // if we're not yet working on this operation, switch over and reset the confirmation status.\n    if (pending.yetNeeded == 0) {\n      // reset count of confirmations needed.\n      pending.yetNeeded = m_required;\n      // reset which owners have confirmed (none) - set our bitmap to 0.\n      pending.ownersDone = 0;\n      pending.index = m_pendingIndex.length++;\n      m_pendingIndex[pending.index] = _operation;\n    }\n    // determine the bit to set for this owner.\n    uint ownerIndexBit = 2**ownerIndex;\n    // make sure we (the message sender) haven't confirmed this operation previously.\n    if (pending.ownersDone & ownerIndexBit == 0) {\n      Confirmation(msg.sender, _operation);\n      // ok - check if count is enough to go ahead.\n      if (pending.yetNeeded <= 1) {\n        // enough confirmations: reset and run interior.\n        delete m_pendingIndex[m_pending[_operation].index];\n        delete m_pending[_operation];\n        return true;\n      }\n      else\n      {\n        // not enough: record that this owner in particular confirmed.\n        pending.yetNeeded--;\n        pending.ownersDone |= ownerIndexBit;\n      }\n    }\n  }\n\n  function reorganizeOwners() private {\n    uint free = 1;\n    while (free < m_numOwners)\n    {\n      while (free < m_numOwners && m_owners[free] != 0) free++;\n      while (m_numOwners > 1 && m_owners[m_numOwners] == 0) m_numOwners--;\n      if (free < m_numOwners && m_owners[m_numOwners] != 0 && m_owners[free] == 0)\n      {\n        m_owners[free] = m_owners[m_numOwners];\n        m_ownerIndex[m_owners[free]] = free;\n        m_owners[m_numOwners] = 0;\n      }\n    }\n  }\n\n  // checks to see if there is at least `_value` left from the daily limit today. if there is, subtracts it and\n  // returns true. otherwise just returns false.\n  function underLimit(uint _value) internal onlyowner returns (bool) {\n    // reset the spend limit if we're on a different day to last time.\n    if (today() > m_lastDay) {\n      m_spentToday = 0;\n      m_lastDay = today();\n    }\n    // check to see if there's enough left - if so, subtract and return true.\n    // overflow protection                    // dailyLimit check\n    if (m_spentToday + _value >= m_spentToday && m_spentToday + _value <= m_dailyLimit) {\n      m_spentToday += _value;\n      return true;\n    }\n    return false;\n  }\n\n  // determines today's index.\n  function today() private constant returns (uint) { return now / 1 days; }\n\n  function clearPending() internal {\n    uint length = m_pendingIndex.length;\n\n    for (uint i = 0; i < length; ++i) {\n      delete m_txs[m_pendingIndex[i]];\n\n      if (m_pendingIndex[i] != 0)\n        delete m_pending[m_pendingIndex[i]];\n    }\n\n    delete m_pendingIndex;\n  }\n\n  // FIELDS\n  address constant _walletLibrary = 0xcafecafecafecafecafecafecafecafecafecafe;\n\n  // the number of owners that must confirm the same operation before it is run.\n  uint public m_required;\n  // pointer used to find a free slot in m_owners\n  uint public m_numOwners;\n\n  uint public m_dailyLimit;\n  uint public m_spentToday;\n  uint public m_lastDay;\n\n  // list of owners\n  uint[256] m_owners;\n\n  uint constant c_maxOwners = 250;\n  // index on the list of owners to allow reverse lookup\n  mapping(uint => uint) m_ownerIndex;\n  // the ongoing operations.\n  mapping(bytes32 => PendingState) m_pending;\n  bytes32[] m_pendingIndex;\n\n  // pending transactions we have at present.\n  mapping (bytes32 => Transaction) m_txs;\n}",
        "simple_suicide.sol": "pragma solidity ^0.4.22;\n\ncontract SimpleSuicide {\n\n  function sudicideAnyone() {\n    selfdestruct(msg.sender);\n  }\n\n}",
        "suicide_multitx_feasible.sol": "pragma solidity ^0.4.23;\n\ncontract SuicideMultiTxFeasible {\n    uint256 private initialized = 0;\n    uint256 public count = 1;\n\n    function init() public {\n        initialized = 1;\n    }\n\n    function run(uint256 input) {\n        if (initialized == 0) {\n            return;\n        }\n\n        selfdestruct(msg.sender);\n    }\n}",
        "suicide_multitx_infeasible.sol": "pragma solidity ^0.4.23;\n\ncontract SuicideMultiTxFeasible {\n    uint256 private initialized = 0;\n    uint256 public count = 1;\n\n    function init() public {\n        initialized = 1;\n    }\n\n    function run(uint256 input) {\n        if (initialized != 2) {\n            return;\n        }\n\n        selfdestruct(msg.sender);\n    }\n}"
    },
    {
        "id": "SWC-107",
        "description": [
            "One of the major dangers of calling external contracts is that they can take over the control flow. In the reentrancy attack (a.k.a. recursive call attack), a malicious contract calls back into the calling contract before the first invocation of the function is finished. This may cause the different invocations of the function to interact in undesirable ways."
        ],
        "modifier_reentrancy.sol": "pragma solidity ^0.5.0;\n\ncontract ModifierEntrancy {\n\n  mapping (address => uint) public tokenBalance;\n  string constant name = \"Nu Token\";\n  Bank bank;\n\n  constructor() public{\n      bank = new Bank();\n  }\n\n  //If a contract has a zero balance and supports the token give them some token\n  function airDrop() hasNoBalance supportsToken  public{\n    tokenBalance[msg.sender] += 20;\n  }\n\n  //Checks that the contract responds the way we want\n  modifier supportsToken() {\n    require(keccak256(abi.encodePacked(\"Nu Token\")) == bank.supportsToken());\n    _;\n  }\n\n  //Checks that the caller has a zero balance\n  modifier hasNoBalance {\n      require(tokenBalance[msg.sender] == 0);\n      _;\n  }\n}\n\ncontract Bank{\n\n    function supportsToken() external returns(bytes32) {\n        return keccak256(abi.encodePacked(\"Nu Token\"));\n    }\n\n}",
        "modifier_reentrancy_fixed.sol": "pragma solidity ^0.5.0;\n\ncontract ModifierEntrancy {\n  mapping (address => uint) public tokenBalance;\n  string constant name = \"Nu Token\";\n  Bank bank;\n  constructor() public{\n      bank = new Bank();\n  }\n\n  //If a contract has a zero balance and supports the token give them some token\n  function airDrop() supportsToken hasNoBalance  public{ // In the fixed version supportsToken comes before hasNoBalance\n    tokenBalance[msg.sender] += 20;\n  }\n\n  //Checks that the contract responds the way we want\n  modifier supportsToken() {\n    require(keccak256(abi.encodePacked(\"Nu Token\")) == bank.supportsToken());\n    _;\n  }\n  //Checks that the caller has a zero balance\n  modifier hasNoBalance {\n      require(tokenBalance[msg.sender] == 0);\n      _;\n  }\n}\n\ncontract Bank{\n\n    function supportsToken() external returns(bytes32){\n        return(keccak256(abi.encodePacked(\"Nu Token\")));\n    }\n}",
        "simple_dao.sol": "/*\n * @source: http://blockchain.unica.it/projects/ethereum-survey/attacks.html#simpledao\n * @author: Atzei N., Bartoletti M., Cimoli T\n * Modified by Josselin Feist\n */\npragma solidity 0.4.24;\n\ncontract SimpleDAO {\n  mapping (address => uint) public credit;\n\n  function donate(address to) payable public{\n    credit[to] += msg.value;\n  }\n\n  function withdraw(uint amount) public{\n    if (credit[msg.sender]>= amount) {\n      require(msg.sender.call.value(amount)());\n      credit[msg.sender]-=amount;\n    }\n  }  \n\n  function queryCredit(address to) view public returns(uint){\n    return credit[to];\n  }\n}",
        "simple_dao_fixed.sol": "/*\n * @source: http://blockchain.unica.it/projects/ethereum-survey/attacks.html#simpledao\n * @author: Atzei N., Bartoletti M., Cimoli T\n * Modified by Bernhard Mueller, Josselin Feist\n */\npragma solidity 0.4.24;\n\ncontract SimpleDAO {\n  mapping (address => uint) public credit;\n\n  function donate(address to) payable public{\n    credit[to] += msg.value;\n  }\n\n  function withdraw(uint amount) public {\n    if (credit[msg.sender]>= amount) {\n      credit[msg.sender]-=amount;\n      require(msg.sender.call.value(amount)());\n    }\n  }  \n\n  function queryCredit(address to) view public returns (uint){\n    return credit[to];\n  }\n}"
    },
    {
        "id": "SWC-108",
        "description": [
            "Labeling the visibility explicitly makes it easier to catch incorrect assumptions about who can access the variable."
        ],
        "storage.sol": "pragma solidity 0.4.24;\n\ncontract TestStorage {\n\n    uint storeduint1 = 15;\n    uint constant constuint = 16;\n    uint32 investmentsDeadlineTimeStamp = uint32(now);\n\n    bytes16 string1 = \"test1\";\n    bytes32 private string2 = \"test1236\";\n    string public string3 = \"lets string something\";\n\n    mapping (address => uint) public uints1;\n    mapping (address => DeviceData) structs1;\n\n    uint[] uintarray;\n    DeviceData[] deviceDataArray;\n\n    struct DeviceData {\n        string deviceBrand;\n        string deviceYear;\n        string batteryWearLevel;\n    }\n\n    function testStorage() public  {\n        address address1 = 0xbccc714d56bc0da0fd33d96d2a87b680dd6d0df6;\n        address address2 = 0xaee905fdd3ed851e48d22059575b9f4245a82b04;\n\n        uints1[address1] = 88;\n        uints1[address2] = 99;\n\n        DeviceData memory dev1 = DeviceData(\"deviceBrand\", \"deviceYear\", \"wearLevel\");\n\n        structs1[address1] = dev1;\n\n        uintarray.push(8000);\n        uintarray.push(9000);\n\n        deviceDataArray.push(dev1);\n    }\n}"
    },
    {
        "id": "SWC-109",
        "description": [
            "Uninitialized local storage variables can point to unexpected storage locations in the contract, which can lead to intentional or unintentional vulnerabilities."
        ],
        "crypto_roulette.sol": "/*\n * @source: https://github.com/thec00n/smart-contract-honeypots/blob/master/CryptoRoulette.sol\n */\npragma solidity ^0.4.19;\n\n// CryptoRoulette\n//\n// Guess the number secretly stored in the blockchain and win the whole contract balance!\n// A new number is randomly chosen after each try.\n//\n// To play, call the play() method with the guessed number (1-20).  Bet price: 0.1 ether\n\ncontract CryptoRoulette {\n\n    uint256 private secretNumber;\n    uint256 public lastPlayed;\n    uint256 public betPrice = 0.1 ether;\n    address public ownerAddr;\n\n    struct Game {\n        address player;\n        uint256 number;\n    }\n    Game[] public gamesPlayed;\n\n    function CryptoRoulette() public {\n        ownerAddr = msg.sender;\n        shuffle();\n    }\n\n    function shuffle() internal {\n        // randomly set secretNumber with a value between 1 and 20\n        secretNumber = uint8(sha3(now, block.blockhash(block.number-1))) % 20 + 1;\n    }\n\n    function play(uint256 number) payable public {\n        require(msg.value >= betPrice && number <= 10);\n\n        Game game;\n        game.player = msg.sender;\n        game.number = number;\n        gamesPlayed.push(game);\n\n        if (number == secretNumber) {\n            // win!\n            msg.sender.transfer(this.balance);\n        }\n\n        shuffle();\n        lastPlayed = now;\n    }\n\n    function kill() public {\n        if (msg.sender == ownerAddr && now > lastPlayed + 1 days) {\n            suicide(msg.sender);\n        }\n    }\n\n    function() public payable { }\n}",
        "crypto_roulette_fixed.sol": "/*\n * @source: https://github.com/thec00n/smart-contract-honeypots/blob/master/CryptoRoulette.sol\n */\npragma solidity ^0.4.19;\n\n// CryptoRoulette\n//\n// Guess the number secretly stored in the blockchain and win the whole contract balance!\n// A new number is randomly chosen after each try.\n//\n// To play, call the play() method with the guessed number (1-20).  Bet price: 0.1 ether\n\ncontract CryptoRoulette {\n\n    uint256 private secretNumber;\n    uint256 public lastPlayed;\n    uint256 public betPrice = 0.1 ether;\n    address public ownerAddr;\n\n    struct Game {\n        address player;\n        uint256 number;\n    }\n    Game[] public gamesPlayed;\n\n    function CryptoRoulette() public {\n        ownerAddr = msg.sender;\n        shuffle();\n    }\n\n    function shuffle() internal {\n        // randomly set secretNumber with a value between 1 and 20\n        secretNumber = uint8(sha3(now, block.blockhash(block.number-1))) % 20 + 1;\n    }\n\n    function play(uint256 number) payable public {\n        require(msg.value >= betPrice && number <= 10);\n\n        Game memory game;\n        game.player = msg.sender;\n        game.number = number;\n        gamesPlayed.push(game);\n\n        if (number == secretNumber) {\n            // win!\n            msg.sender.transfer(this.balance);\n        }\n\n        shuffle();\n        lastPlayed = now;\n    }\n\n    function kill() public {\n        if (msg.sender == ownerAddr && now > lastPlayed + 1 days) {\n            suicide(msg.sender);\n        }\n    }\n\n    function() public payable { }\n}"
    },
    {
        "id": "SWC-110",
        "description": [
            "The Solidity `assert()` function is meant to assert invariants. Properly functioning code should *never* reach a failing assert statement. A reachable assertion can mean one of two things:\n\n1. A bug exists in the contract that allows it to enter an invalid state;\n1. The `assert` statement is used incorrectly, e.g. to validate inputs."
        ],
        "assert_constructor.sol": "/*\n * @source: https://github.com/ConsenSys/evm-analyzer-benchmark-suite\n * @author: Suhabe Bugrara\n */\n\npragma solidity ^0.4.19;\n\ncontract AssertConstructor {\n    function AssertConstructor() public {\n        assert(false);\n    }\n}",
        "assert_minimal.sol": "/*\n * @source: https://github.com/ConsenSys/evm-analyzer-benchmark-suite\n * @author: Suhabe Bugrara\n */\n\npragma solidity ^0.4.19;\n\ncontract AssertMinimal {\n    function run() public {\n        assert(false);\n    }\n}",
        "assert_multitx_1.sol": "/*\n * @source: https://github.com/ConsenSys/evm-analyzer-benchmark-suite\n * @author: Suhabe Bugrara\n */\n\npragma solidity ^0.4.19;\n\ncontract AssertMultiTx1 {\n    uint256 private param;\n\n    function AssertMultiTx1(uint256 _param) public {\n        require(_param > 0);\n        param = _param;\n    }\n\n    function run() {\n        assert(param > 0);\n    }\n\n}",
        "assert_multitx_2.sol": "/*\n * @source: https://github.com/ConsenSys/evm-analyzer-benchmark-suite\n * @author: Suhabe Bugrara\n */\n\npragma solidity ^0.4.19;\n\ncontract AssertMultiTx2 {\n    uint256 private param;\n\n    function AssertMultiTx2(uint256 _param) public {\n        param = 0;\n    }\n\n    function run() {\n        assert(param > 0);\n    }\n\n    function set(uint256 _param) {\n        param = _param;\n    }\n\n\n}",
        "constructor_create.sol": "/*\n * @source: ChainSecurity\n * @author: Anton Permenev\n */\n\npragma solidity ^0.4.25;\n\ncontract ConstructorCreate{\n    B b = new B();\n\n    function check(){\n        assert(b.foo() == 10);\n    }\n\n}\n\ncontract B{\n\n    function foo() returns(uint){\n        return 11;\n    }\n}",
        "constructor_create_argument.sol": "/*\n * @source: ChainSecurity\n * @author: Anton Permenev\n */\npragma solidity ^0.4.22;\n\ncontract ConstructorCreateArgument{\n    B b = new B(11);\n\n    function check(){\n        assert(b.foo() == 10);\n    }\n\n}\n\ncontract B{\n\n    uint x_;\n    constructor(uint x){\n        x_ = x;\n    }\n\n    function foo() returns(uint){\n        return x_;\n    }\n}",
        "constructor_create_modifiable.sol": "/*\n * @source: ChainSecurity\n * @author: Anton Permenev\n * Assert violation with 2 message calls:\n * - B.set_x(X): X != 10\n * - ContructorCreateModifiable.check()\n */\n\npragma solidity ^0.4.22;\n\ncontract ContructorCreateModifiable{\n    B b = new B(10);\n\n    function check(){\n        assert(b.foo() == 10);\n    }\n\n}\n\ncontract B{\n\n    uint x_;\n    constructor(uint x){\n        x_ = x;\n    }\n\n    function foo() returns(uint){\n        return x_;\n    }\n\n    function set_x(uint x){\n        x_ = x;\n    }\n}",
        "gas_model.sol": "/*\n * @source: ChainSecurity\n * @author: Anton Permenev\n */\npragma solidity ^0.4.21;\n\ncontract GasModel{\n    uint x = 100;\n    function check(){\n        uint a = gasleft();\n        x = x + 1;\n        uint b = gasleft();\n        assert(b > a);\n    }\n}",
        "gas_model_fixed.sol": "/*\n * @source: ChainSecurity\n * @author: Anton Permenev\n */\npragma solidity ^0.4.21;\n\ncontract GasModelFixed{\n    uint x = 100;\n    function check(){\n        uint a = gasleft();\n        x = x + 1;\n        uint b = gasleft();\n        assert(b < a);\n    }\n}",
        "mapping_perfomance_2.sol": "/*\n * @source: ChainSecurity\n * @author: Anton Permenev\n */\npragma solidity ^0.4.22;\n\ncontract MappingPerformance2sets{\n\n    mapping(bytes32=>uint) m0;\n    mapping(bytes32=>uint) m1;\n    mapping(bytes32=>uint) m2;\n    mapping(bytes32=>uint) m3;\n    mapping(bytes32=>uint) m4;\n    mapping(bytes32=>uint) m5;\n    uint b;\n\n    constructor(){\n        b = 10;\n    }\n\n    function set(bytes32 a, uint cond){\n        if(cond == 0){\n            m0[a] = 5;\n        }else if(cond == 1){\n            m1[a] = 5;\n        }else if(cond == 2){\n            m2[a] = 5;\n        }else if(cond == 3){\n            m3[a] = 5;\n        }else if(cond == 4){\n            m4[a] = 5;\n        }\n    }\n    function check(bytes32 a0, uint cond0,\n                  bytes32 a1, uint cond1, bytes32 a){\n                      set(a0, cond0);\n                      set(a1, cond1);\n                      assert(m5[a] == 0);\n    }\n}",
        "mapping_performance_1.sol": "/*\n * @source: ChainSecurity\n * @author: Anton Permenev\n */\npragma solidity ^0.4.22;\n\ncontract MappingPerformance1set{\n\n    mapping(bytes32=>uint) m0;\n    mapping(bytes32=>uint) m1;\n    mapping(bytes32=>uint) m2;\n    mapping(bytes32=>uint) m3;\n    mapping(bytes32=>uint) m4;\n    mapping(bytes32=>uint) m5;\n    uint b;\n\n    constructor(){\n        b = 10;\n    }\n\n    function set(bytes32 a, uint cond){\n        if(cond == 0){\n            m0[a] = 5;\n        }else if(cond == 1){\n            m1[a] = 5;\n        }else if(cond == 2){\n            m2[a] = 5;\n        }else if(cond == 3){\n            m3[a] = 5;\n        }else if(cond == 4){\n            m4[a] = 5;\n        }\n    }\n    function check(bytes32 a0, uint cond0, bytes32 a){\n                      set(a0, cond0);\n                      assert(m5[a] == 0);\n    }\n}",
        "out-of-bounds-exception.sol": "pragma solidity ^0.5.0;\n\ncontract OutOfBoundsException {\n\n\tuint256[] private array;\n\n\tfunction getArrayElement(uint256 idx) public returns (uint256) {\n\t\treturn array[idx];\n\t}\n\n}",
        "return_memory.sol": "/*\n * @source: https://forum.zeppelin.solutions/t/using-automatic-analysis-tools-with-makerdao-contracts/1021/3\n * Author: Dan Guido / Trail of Bits\n * Slightly modified by Bernhard Mueller\n\n* An assertion violation is possible in 3 transactions:\n*\n* etch(addr)\n* lookup(slate, addr)\n* checkAnInvariant()\n\n* Whereby slate == Keccak(addr)\n*\n* Ideally tools should output the correct transaction trace.\n*/\n\npragma solidity ^0.5.0;\n\ncontract ReturnMemory {\n    mapping(bytes32=>address) public slates;\n    bool everMatched = false;\n\n    function etch(address yay) public returns (bytes32 slate) {\n        bytes32 hash = keccak256(abi.encodePacked(yay));\n        slates[hash] = yay;\n        return hash;\n    }\n\n    function lookup(bytes32 slate, address nay) public {\n       if (nay != address(0x0)) {\n         everMatched = slates[slate] == nay;\n       }\n    }\n\n    function checkAnInvariant() public returns (bool) {\n        assert(!everMatched);\n    }\n}",
        "runtime_create_user_input.sol": "/*\n * @source: ChainSecurity\n * @author: Anton Permenev\n */\npragma solidity ^0.4.22;\n\ncontract RuntimeCreateUserInput{\n\n    function check(uint x){\n        B b = new B(x);\n        assert(b.foo() == 10);\n    }\n\n}\n\ncontract B{\n\n    uint x_;\n    constructor(uint x){\n        x_ = x;\n    }\n\n    function foo() returns(uint){\n        return x_;\n    }\n\n}",
        "runtime_user_input_call.sol": "/*\n * @source: ChainSecurity\n * @author: Anton Permenev\n */\npragma solidity ^0.4.19;\n\ncontract RuntimeUserInputCall{\n\n    function check(address b){\n        assert(B(b).foo() == 10);\n    }\n\n}\n\ncontract B{\n    function foo() returns(uint);\n}",
        "sha_of_sha_2_mappings.sol": "/*\n * @source: ChainSecurity\n * @author: Anton Permenev\n */\npragma solidity ^0.4.22;\n\ncontract ShaOfSha2Mappings{\n\n    mapping(bytes32=>uint) m;\n    mapping(bytes32=>uint) n;\n\n    constructor(){\n        m[keccak256(abi.encode(\"AAA\", msg.sender))] = 100;\n    }\n\n    function check(address a){\n        assert(n[keccak256(abi.encode(\"BBB\", a))] == 0);\n    }\n\n}",
        "sha_of_sha_collision.sol": "/*\n * @source: ChainSecurity\n * @author: Anton Permenev\n * Assert violation with 2 message calls:\n * - set(66)\n * - check(0x4100000000000000000000000000000000000000000000000000000000000000)\n */\npragma solidity ^0.4.22;\n\ncontract ShaOfShaCollission{\n\n    mapping(bytes32=>uint) m;\n\n    function set(uint x){\n        m[keccak256(abi.encodePacked(\"A\", x))] = 1;\n    }\n    function check(uint x){\n        assert(m[keccak256(abi.encodePacked(x, \"B\"))] == 0);\n    }\n\n}",
        "sha_of_sha_concrete.sol": "/*\n * @source: ChainSecurity\n * @author: Anton Permenev\n */\npragma solidity ^0.4.22;\n\ncontract ShaOfShaConcrete{\n\n    mapping(bytes32=>uint) m;\n    uint b;\n\n    constructor(){\n        b = 1;\n    }\n\n    function check(uint x){\n        assert(m[keccak256(abi.encodePacked(x, \"B\"))] == 0);\n    }\n\n}",
        "token-with-backdoor.sol": "/*\n * @source: TrailofBits workshop at TruffleCon 2018\n * @author: Josselin Feist (adapted for SWC by Bernhard Mueller)\n * Assert violation with 3 message calls:\n * - airdrop()\n * - backdoor()\n * - test_invariants()\n */\npragma solidity ^0.4.22;\n\ncontract Token{\n\n    mapping(address => uint) public balances;\n    function airdrop() public{\n        balances[msg.sender] = 1000;\n    }\n\n    function consume() public{\n        require(balances[msg.sender]>0);\n        balances[msg.sender] -= 1;\n    }\n\n    function backdoor() public{\n        balances[msg.sender] += 1;\n    }\n\n   function test_invariants() {\n      assert(balances[msg.sender] <= 1000);\n  }\n}",
        "two_mapppings.sol": "pragma solidity ^0.4.22;\n\ncontract TwoMappings{\n\n    mapping(uint=>uint) m;\n    mapping(uint=>uint) n;\n\n    constructor(){\n        m[10] = 100;\n    }\n\n    function check(uint a){\n        assert(n[a] == 0);\n    }\n\n}",
        "simpledschief.sol": "/*\n * @source: https://forum.zeppelin.solutions/t/using-automatic-analysis-tools-with-makerdao-contracts/1021/3\n * Author: Vera Bogdanich Espina / Zeppelin Solutions\n *\n * A simplified version of the MakerDAO DSChief contract.\n*  Tools should output the correct transaction trace (see source link).\n*/\n\ncontract SimpleDSChief {\n    mapping(bytes32=>address) public slates;\n    mapping(address=>bytes32) public votes;\n    mapping(address=>uint256) public approvals;\n    mapping(address=>uint256) public deposits;\n\n    function lock(uint wad) public {\n        deposits[msg.sender] = add(deposits[msg.sender], wad);\n        addWeight(wad, votes[msg.sender]);\n    }\n\n    function free(uint wad) public {\n        deposits[msg.sender] = sub(deposits[msg.sender], wad);\n        subWeight(wad, votes[msg.sender]);\n    }\n\n    function voteYays(address yay) public returns (bytes32){\n        bytes32 slate = etch(yay);\n        voteSlate(slate);\n\n        return slate;\n    }\n\n    function etch(address yay) public returns (bytes32 slate) {\n        bytes32 hash = keccak256(abi.encodePacked(yay));\n\n        slates[hash] = yay;\n\n        return hash;\n    }\n\n    function voteSlate(bytes32 slate) public {\n        uint weight = deposits[msg.sender];\n        subWeight(weight, votes[msg.sender]);\n        votes[msg.sender] = slate;\n        addWeight(weight, votes[msg.sender]);\n    }\n\n    function addWeight(uint weight, bytes32 slate) internal {\n        address yay = slates[slate];\n        approvals[yay] = add(approvals[yay], weight);\n    }\n\n    function subWeight(uint weight, bytes32 slate) internal {\n        address yay = slates[slate];\n        approvals[yay] = sub(approvals[yay], weight);\n    }\n\n    function add(uint x, uint y) internal pure returns (uint z) {\n        require((z = x + y) >= x);\n    }\n\n    function sub(uint x, uint y) internal pure returns (uint z) {\n        require((z = x - y) <= x);\n    }\n\n   function checkAnInvariant() public {\n        bytes32 senderSlate = votes[msg.sender];\n        address option = slates[senderSlate];\n        uint256 senderDeposit = deposits[msg.sender];\n\n        assert(approvals[option] >= senderDeposit);\n    }\n}"
    },
    {
        "id": "SWC-111",
        "description": [
            "Several functions and operators in Solidity are deprecated. Using them leads to reduced code quality. With new major versions of the Solidity compiler, deprecated functions and operators may result in side effects and compile errors."
        ],
        "deprecated_simple.sol": "pragma solidity ^0.4.24;\n\ncontract DeprecatedSimple {\n\n    // Do everything that's deprecated, then commit suicide.\n\n    function useDeprecated() public constant {\n\n        bytes32 blockhash = block.blockhash(0);\n        bytes32 hashofhash = sha3(blockhash);\n\n        uint gas = msg.gas;\n\n        if (gas == 0) {\n            throw;\n        }\n\n        address(this).callcode();\n\n        var a = [1,2,3];\n\n        var (x, y, z) = (false, \"test\", 0);\n\n        suicide(address(0));\n    }\n\n    function () public {}\n\n}",
        "deprecated_simple_fixed.sol": "pragma solidity ^0.4.24;\n\ncontract DeprecatedSimpleFixed {\n\n    function useDeprecatedFixed() public view {\n\n        bytes32 bhash = blockhash(0);\n        bytes32 hashofhash = keccak256(bhash);\n\n        uint gas = gasleft();\n\n        if (gas == 0) {\n            revert();\n        }\n\n        address(this).delegatecall();\n\n        uint8[3] memory a = [1,2,3];\n\n        (bool x, string memory y, uint8 z) = (false, \"test\", 0);\n\n        selfdestruct(address(0));\n    }\n\n    function () external {}\n\n}"
    },
    {
        "id": "SWC-113",
        "description": [
            "External calls can fail accidentally or deliberately, which can cause a DoS condition in the contract. To minimize the damage caused by such failures, it is better to isolate each external call into its own transaction that can be initiated by the recipient of the call. This is especially relevant for payments, where it is better to let users withdraw funds rather than push funds to them automatically (this also reduces the chance of problems with the gas limit)."
        ],
        "send_loop.sol": "/*\n * @source: https://consensys.github.io/smart-contract-best-practices/known_attacks/#dos-with-unexpected-revert\n * @author: ConsenSys Diligence\n * Modified by Bernhard Mueller\n */\n\npragma solidity 0.4.24;\n\ncontract Refunder {\n\naddress[] private refundAddresses;\nmapping (address => uint) public refunds;\n\n\tconstructor() {\n\t\trefundAddresses.push(0x79B483371E87d664cd39491b5F06250165e4b184);\n\t\trefundAddresses.push(0x79B483371E87d664cd39491b5F06250165e4b185);\n\t}\n\n\t// bad\n\tfunction refundAll() public {\n\t    for(uint x; x < refundAddresses.length; x++) { // arbitrary length iteration based on how many addresses participated\n\t        require(refundAddresses[x].send(refunds[refundAddresses[x]])); // doubly bad, now a single failure on send will hold up all funds\n\t    }\n\t}\n\n}"
    },
    {
        "id": "SWC-112",
        "description": [
            "There exists a special variant of a message call, named `delegatecall` which is identical to a message call apart from the fact that the code at the target address is executed in the context of the calling contract and `msg.sender` and `msg.value` do not change their values. This allows a smart contract to dynamically load code from a different address at runtime. Storage, current address and balance still refer to the calling contract.\n\nCalling into untrusted contracts is very dangerous, as the code at the target address can change any storage values of the caller and has full control over the caller's balance."
        ],
        "proxy.sol": "pragma solidity ^0.4.24;\n\ncontract Proxy {\n\n  address owner;\n\n  constructor() public {\n    owner = msg.sender;  \n  }\n\n  function forward(address callee, bytes _data) public {\n    require(callee.delegatecall(_data));\n  }\n\n}",
        "proxy_fixed.sol": "pragma solidity ^0.4.24;\n\ncontract Proxy {\n\n  address callee;\n  address owner;\n\n  modifier onlyOwner {\n    require(msg.sender == owner);\n    _;\n  }\n\n  constructor() public {\n  \tcallee = address(0x0);\n    owner = msg.sender;\n  }\n\n  function setCallee(address newCallee) public onlyOwner {\n  \tcallee = newCallee;\n  }\n\n  function forward(bytes _data) public {\n    require(callee.delegatecall(_data));\n  }\n\n}",
        "proxy_pattern_false_positive.sol": "pragma solidity ^0.4.24;\n\ncontract proxy{\n  address owner;\n\n  function proxyCall(address _to, bytes _data) external {\n    require( !_to.delegatecall(_data));\n  }\n  function withdraw() external{\n    require(msg.sender == owner);\n    msg.sender.transfer(address(this).balance);\n  }\n}\n\n/*\nYou can't use proxyCall to change the owner address as either:\n\n1) the delegatecall reverts and thus does not change owner\n2) the delegatecall does not revert and therefore will cause the proxyCall to revert and preventing owner from changing\n\nThis false positive may seem like a really edge case, however since you can revert data back to proxy this patern is useful for proxy architectures\n*/"
    },
    {
        "id": "SWC-114",
        "description": [
            "The Ethereum network processes transactions in blocks, with new blocks getting confirmed approximately every 17 seconds. Miners review the transactions they have received and select which ones to include in a block, based on who has paid a high enough gas price to be included. Additionally, when transactions are sent to the Ethereum network, they are forwarded to each node for processing. Thus, a person who is running an Ethereum node can tell which transactions are going to occur before they are finalized. A race condition vulnerability occurs when code depends on the order of the transactions submitted to it.\n\nThe simplest example of a race condition is when a smart contract gives a reward for submitting information. Suppose a contract will give out 1 token to the first person who solves a math problem. Alice solves the problem and submits the answer to the network with a standard gas price. Eve runs an Ethereum node and can see the answer to the math problem in the transaction that Alice submitted to the network. So, Eve submits the answer to the network with a much higher gas price, and thus it gets processed and committed before Alice's transaction. Eve receives one token, and Alice gets nothing, even though it was Alice who worked to solve the problem. A common way this occurs in practice is when a contract rewards people for calling out bad behavior in a protocol by giving a bad actor's deposit to the person who proved they were misbehaving.\n\nThe race condition that happens most frequently on the network today is the race condition in the ERC20 token standard. The ERC20 token standard includes a function called 'approve', which allows an address to approve another address to spend tokens on their behalf. Assume that Alice has approved Eve to spend n of her tokens, then Alice decides to change Eve's approval to m tokens. Alice submits a function call to approve with the value n for Eve. Eve runs an Ethereum node, so she knows that Alice is going to change her approval to m. Eve then submits a transferFrom request, sending n of Alice's tokens to herself, but gives it a much higher gas price than Alice's transaction. The transferFrom executes first so gives Eve n tokens and sets Eve's approval to zero. Then Alice's transaction executes and sets Eve's approval to m. Eve then sends those m tokens to herself as well. Thus, Eve gets n + m tokens, even though she should have gotten at most max(n,m)."
        ],
        "ERC20.sol": "pragma solidity ^0.4.24;\n\n/** Taken from the OpenZeppelin github\n * @title SafeMath\n * @dev Math operations with safety checks that revert on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, reverts on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (a == 0) {\n      return 0;\n    }\n\n    uint256 c = a * b;\n    require(c / a == b);\n\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b > 0); // Solidity only automatically asserts when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n    return c;\n  }\n\n  /**\n  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b <= a);\n    uint256 c = a - b;\n\n    return c;\n  }\n\n  /**\n  * @dev Adds two numbers, reverts on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    require(c >= a);\n\n    return c;\n  }\n\n  /**\n  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\n  * reverts when dividing by zero.\n  */\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b != 0);\n    return a % b;\n  }\n}\n\n\ncontract ERC20 {\n\n  event Transfer( address indexed from, address indexed to, uint256 value );\n  event Approval( address indexed owner, address indexed spender, uint256 value);\n  using SafeMath for *;\n\n  mapping (address => uint256) private _balances;\n\n  mapping (address => mapping (address => uint256)) private _allowed;\n\n  uint256 private _totalSupply;\n\n  constructor(uint totalSupply){\n    _balances[msg.sender] = totalSupply;\n  }\n\n  function balanceOf(address owner) public view returns (uint256) {\n    return _balances[owner];\n  }\n\n\n  function allowance(address owner, address spender) public view returns (uint256)\n  {\n    return _allowed[owner][spender];\n  }\n\n  function transfer(address to, uint256 value) public returns (bool) {\n    require(value <= _balances[msg.sender]);\n    require(to != address(0));\n\n    _balances[msg.sender] = _balances[msg.sender].sub(value);\n    _balances[to] = _balances[to].add(value);\n    emit Transfer(msg.sender, to, value);\n    return true;\n  }\n\n  function approve(address spender, uint256 value) public returns (bool) {\n    require(spender != address(0));\n\n    _allowed[msg.sender][spender] = value;\n    emit Approval(msg.sender, spender, value);\n    return true;\n  }\n\n  function transferFrom(address from, address to, uint256 value) public returns (bool) {\n    require(value <= _balances[from]);\n    require(value <= _allowed[from][msg.sender]);\n    require(to != address(0));\n\n    _balances[from] = _balances[from].sub(value);\n    _balances[to] = _balances[to].add(value);\n    _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\n    emit Transfer(from, to, value);\n    return true;\n  }\n}",
        "eth_tx_order_dependence_minimal.sol": "/*\n * @source: https://github.com/ConsenSys/evm-analyzer-benchmark-suite\n * @author: Suhabe Bugrara\n */\n\npragma solidity ^0.4.16;\n\ncontract EthTxOrderDependenceMinimal {\n    address public owner;\n    bool public claimed;\n    uint public reward;\n\n    function EthTxOrderDependenceMinimal() public {\n        owner = msg.sender;\n    }\n\n    function setReward() public payable {\n        require (!claimed);\n\n        require(msg.sender == owner);\n        owner.transfer(reward);\n        reward = msg.value;\n    }\n\n    function claimReward(uint256 submission) {\n        require (!claimed);\n        require(submission < 10);\n\n        msg.sender.transfer(reward);\n        claimed = true;\n    }\n}"
    },
    {
        "id": "SWC-115",
        "description": [
            "`tx.origin` is a global variable in Solidity which returns the address of the account that sent the transaction. Using the variable for authorization could make a contract vulnerable if an authorized account calls into a malicious contract. A call could be made to the vulnerable contract that passes the authorization check since `tx.origin` returns the original sender of the transaction which in this case is the authorized account."
        ],
        "mycontract.sol": "/*\n * @source: https://consensys.github.io/smart-contract-best-practices/recommendations/#avoid-using-txorigin\n * @author: Consensys Diligence  \n * Modified by Gerhard Wagner\n */\n\npragma solidity 0.4.24;\n\ncontract MyContract {\n\n    address owner;\n\n    function MyContract() public {\n        owner = msg.sender;\n    }\n\n    function sendTo(address receiver, uint amount) public {\n        require(tx.origin == owner);\n        receiver.transfer(amount);\n    }\n\n}",
        "mycontract_fixed.sol": "/*\n * @source: https://consensys.github.io/smart-contract-best-practices/recommendations/#avoid-using-txorigin\n * @author: Consensys Diligence\n * Modified by Gerhard Wagner\n */\n\npragma solidity 0.4.25;\n\ncontract MyContract {\n\n    address owner;\n\n    function MyContract() public {\n        owner = msg.sender;\n    }\n\n    function sendTo(address receiver, uint amount) public {\n      require(msg.sender == owner);\n      receiver.transfer(amount);\n    }\n\n}"
    },
    {
        "id": "SWC-116",
        "description": [
            "Contracts often need access to time values to perform certain types of functionality. Values such as `block.timestamp`, and `block.number` can give you a sense of the current time or a time delta, however, they are not safe to use for most purposes.\n\nIn the case of `block.timestamp`, developers often attempt to use it to trigger time-dependent events. As Ethereum is decentralized, nodes can synchronize time only to some degree. Moreover, malicious miners can alter the timestamp of their blocks, especially if they can gain advantages by doing so. However, miners can't set a timestamp smaller than the previous one (otherwise the block will be rejected), nor can they set the timestamp too far ahead in the future. Taking all of the above into consideration, developers can't rely on the preciseness of the provided timestamp.\n\nAs for `block.number`, considering the block time on Ethereum is generally about 14 seconds, it's possible to predict the time delta between blocks. However, block times are not constant and are subject to change for a variety of reasons, e.g. fork reorganisations and the difficulty bomb. Due to variable block times, `block.number` should also not be relied on for precise calculations of time."
        ],
        "time_lock.sol": "/*\n * @author: Kaden Zipfel\n */\n\npragma solidity ^0.5.0;\n\ncontract TimeLock {\n    struct User {\n        uint amount; // amount locked (in eth)\n        uint unlockBlock; // minimum block to unlock eth\n    }\n\n    mapping(address => User) private users;\n\n    // Tokens should be locked for exact time specified\n    function lockEth(uint _time, uint _amount) public payable {\n        require(msg.value == _amount, 'must send exact amount');\n        users[msg.sender].unlockBlock = block.number + (_time / 14);\n        users[msg.sender].amount = _amount;\n    }\n\n    // Withdraw tokens if lock period is over\n    function withdraw() public {\n        require(users[msg.sender].amount > 0, 'no amount locked');\n        require(block.number >= users[msg.sender].unlockBlock, 'lock period not over');\n\n        uint amount = users[msg.sender].amount;\n        users[msg.sender].amount = 0;\n        (bool success, ) = msg.sender.call.value(amount)(\"\");\n        require(success, 'transfer failed');\n    }\n}",
        "timed_crowdsale.sol": "pragma solidity ^0.5.0;\n\ncontract TimedCrowdsale {\n\n  event Finished();\n  event notFinished();\n\n  // Sale should finish exactly at January 1, 2019\n  function isSaleFinished() private returns (bool) {\n    return block.timestamp >= 1546300800;\n  }\n\n  function run() public {\n  \tif (isSaleFinished()) {\n  \t\temit Finished();\n  \t} else {\n  \t\temit notFinished();\n  \t}\n  }\n\n}"
    },
    {
        "id": "SWC-117",
        "description": [
            "The implementation of a cryptographic signature system in Ethereum contracts often assumes that the signature is unique, but signatures can be altered without the possession of the private key and still be valid. The EVM specification defines several so-called â€˜precompiledâ€™ contracts one of them being `ecrecover` which executes the elliptic curve public key recovery. A malicious user can slightly modify the three values _v_, _r_ and _s_ to create other valid signatures. A system that performs signature verification on contract level might be susceptible to attacks if the signature is part of the signed message hash. Valid signatures could be created by a malicious user to replay previously signed messages."
        ],
        "transaction_malleablity.sol": "pragma solidity ^0.4.24;\n\ncontract transaction_malleablity{\n  mapping(address => uint256) balances;\n  mapping(bytes32 => bool) signatureUsed;\n\n  constructor(address[] owners, uint[] init){\n    require(owners.length == init.length);\n    for(uint i=0; i < owners.length; i ++){\n      balances[owners[i]] = init[i];\n    }\n  }\n\n  function transfer(\n        bytes _signature,\n        address _to,\n        uint256 _value,\n        uint256 _gasPrice,\n        uint256 _nonce)\n      public\n    returns (bool)\n    {\n      bytes32 txid = keccak256(abi.encodePacked(getTransferHash(_to, _value, _gasPrice, _nonce), _signature));\n      require(!signatureUsed[txid]);\n\n      address from = recoverTransferPreSigned(_signature, _to, _value, _gasPrice, _nonce);\n\n      require(balances[from] > _value);\n      balances[from] -= _value;\n      balances[_to] += _value;\n\n      signatureUsed[txid] = true;\n    }\n\n    function recoverTransferPreSigned(\n        bytes _sig,\n        address _to,\n        uint256 _value,\n        uint256 _gasPrice,\n        uint256 _nonce)\n      public\n      view\n    returns (address recovered)\n    {\n        return ecrecoverFromSig(getSignHash(getTransferHash(_to, _value, _gasPrice, _nonce)), _sig);\n    }\n\n    function getTransferHash(\n        address _to,\n        uint256 _value,\n        uint256 _gasPrice,\n        uint256 _nonce)\n      public\n      view\n    returns (bytes32 txHash) {\n        return keccak256(address(this), bytes4(0x1296830d), _to, _value, _gasPrice, _nonce);\n    }\n\n    function getSignHash(bytes32 _hash)\n      public\n      pure\n    returns (bytes32 signHash)\n    {\n        return keccak256(\"\\x19Ethereum Signed Message:\\n32\", _hash);\n    }\n\n    function ecrecoverFromSig(bytes32 hash, bytes sig)\n      public\n      pure\n    returns (address recoveredAddress)\n    {\n        bytes32 r;\n        bytes32 s;\n        uint8 v;\n        if (sig.length != 65) return address(0);\n        assembly {\n            r := mload(add(sig, 32))\n            s := mload(add(sig, 64))\n            v := byte(0, mload(add(sig, 96)))\n        }\n        if (v < 27) {\n          v += 27;\n        }\n        if (v != 27 && v != 28) return address(0);\n        return ecrecover(hash, v, r, s);\n    }\n}",
        "transaction_malleablity_fixed.sol": "pragma solidity ^0.4.24;\n\ncontract transaction_malleablity{\n  mapping(address => uint256) balances;\n  mapping(bytes32 => bool) signatureUsed;\n\n  constructor(address[] owners, uint[] init){\n    require(owners.length == init.length);\n    for(uint i=0; i < owners.length; i ++){\n      balances[owners[i]] = init[i];\n    }\n  }\n\n  function transfer(\n        bytes _signature,\n        address _to,\n        uint256 _value,\n        uint256 _gasPrice,\n        uint256 _nonce)\n      public\n    returns (bool)\n    {\n      bytes32 txid = getTransferHash(_to, _value, _gasPrice, _nonce);\n      require(!signatureUsed[txid]);\n\n      address from = recoverTransferPreSigned(_signature, _to, _value, _gasPrice, _nonce);\n\n      require(balances[from] > _value);\n      balances[from] -= _value;\n      balances[_to] += _value;\n\n      signatureUsed[txid] = true;\n    }\n\n    function recoverTransferPreSigned(\n        bytes _sig,\n        address _to,\n        uint256 _value,\n        uint256 _gasPrice,\n        uint256 _nonce)\n      public\n      view\n    returns (address recovered)\n    {\n        return ecrecoverFromSig(getSignHash(getTransferHash(_to, _value, _gasPrice, _nonce)), _sig);\n    }\n\n    function getTransferHash(\n        address _to,\n        uint256 _value,\n        uint256 _gasPrice,\n        uint256 _nonce)\n      public\n      view\n    returns (bytes32 txHash) {\n        return keccak256(address(this), bytes4(0x1296830d), _to, _value, _gasPrice, _nonce);\n    }\n\n    function getSignHash(bytes32 _hash)\n      public\n      pure\n    returns (bytes32 signHash)\n    {\n        return keccak256(\"\\x19Ethereum Signed Message:\\n32\", _hash);\n    }\n\n    function ecrecoverFromSig(bytes32 hash, bytes sig)\n      public\n      pure\n    returns (address recoveredAddress)\n    {\n        bytes32 r;\n        bytes32 s;\n        uint8 v;\n        if (sig.length != 65) return address(0);\n        assembly {\n            r := mload(add(sig, 32))\n            s := mload(add(sig, 64))\n            v := byte(0, mload(add(sig, 96)))\n        }\n        if (v < 27) {\n          v += 27;\n        }\n        if (v != 27 && v != 28) return address(0);\n        return ecrecover(hash, v, r, s);\n    }\n}"
    },
    {
        "id": "SWC-118",
        "description": [
            "Constructors are special functions that are called only once during the contract creation. They often perform critical, privileged actions such as setting the owner of the contract. Before Solidity version 0.4.22, the only way of defining a constructor was to create a function with the same name as the contract class containing it. A function meant to become a constructor becomes a normal, callable function if its name doesn't exactly match the contract name.\nThis behavior sometimes leads to security issues, in particular when smart contract code is re-used with a different name but the name of the constructor function is not changed accordingly."
        ],
        "incorrect_constructor_name1.sol": "/*\n * @source: https://github.com/trailofbits/not-so-smart-contracts/blob/master/wrong_constructor_name/incorrect_constructor.sol\n * @author: Ben Perez\n * Modified by Gerhard Wagner\n */\n\n\npragma solidity 0.4.24;\n\ncontract Missing{\n    address private owner;\n\n    modifier onlyowner {\n        require(msg.sender==owner);\n        _;\n    }\n\n    function missing()\n        public\n    {\n        owner = msg.sender;\n    }\n\n    function () payable {}\n\n    function withdraw()\n        public\n        onlyowner\n    {\n       owner.transfer(this.balance);\n    }\n}",
        "incorrect_constructor_name1_fixed.sol": "/*\n * @source: https://github.com/trailofbits/not-so-smart-contracts/blob/master/wrong_constructor_name/incorrect_constructor.sol\n * @author: Ben Perez\n * Modified by Gerhard Wagner\n */\n\n\npragma solidity ^0.4.24;\n\ncontract Missing{\n    address private owner;\n\n    modifier onlyowner {\n        require(msg.sender==owner);\n        _;\n    }\n\n    constructor()\n        public\n    {\n        owner = msg.sender;\n    }\n\n    function () payable {}\n\n    function withdraw()\n        public\n        onlyowner\n    {\n       owner.transfer(this.balance);\n    }\n}",
        "incorrect_constructor_name2.sol": "/*\n * @source: https://github.com/trailofbits/not-so-smart-contracts/blob/master/wrong_constructor_name/incorrect_constructor.sol\n * @author: Ben Perez\n * Modified by Gerhard Wagner\n */\n\npragma solidity 0.4.24;\n\ncontract Missing{\n    address private owner;\n\n    modifier onlyowner {\n        require(msg.sender==owner);\n        _;\n    }\n\n    function Constructor()\n        public\n    {\n        owner = msg.sender;\n    }\n\n    function () payable {}\n\n    function withdraw()\n        public\n        onlyowner\n    {\n       owner.transfer(this.balance);\n    }\n\n}",
        "incorrect_constructor_name2_fixed.sol": "/*\n * @source: https://github.com/trailofbits/not-so-smart-contracts/blob/master/wrong_constructor_name/incorrect_constructor.sol\n * @author: Ben Perez\n * Modified by Gerhard Wagner\n */\n\npragma solidity ^0.4.24;\n\ncontract Missing{\n    address private owner;\n\n    modifier onlyowner {\n        require(msg.sender==owner);\n        _;\n    }\n\n    constructor()\n        public\n    {\n        owner = msg.sender;\n    }\n\n    function () payable {}\n\n    function withdraw()\n        public\n        onlyowner\n    {\n       owner.transfer(this.balance);\n    }\n\n}"
    },
    {
        "id": "SWC-119",
        "description": [
            "Solidity allows for ambiguous naming of state variables when inheritance is used. Contract `A` with a variable `x` could inherit contract `B` that also has a state variable `x` defined. This would result in two separate versions of `x`, one of them being accessed from contract `A` and the other one from contract `B`. In more complex contract systems this condition could go unnoticed and subsequently lead to security issues.\n\nShadowing state variables can also occur within a single contract when there are multiple definitions on the contract and function level."
        ],
        "ShadowingInFunctions.sol": "pragma solidity 0.4.24;\n\ncontract ShadowingInFunctions {\n    uint n = 2;\n    uint x = 3;\n\n    function test1() constant returns (uint n) {\n        return n; // Will return 0\n    }\n\n    function test2() constant returns (uint n) {\n        n = 1;\n        return n; // Will return 1\n    }\n\n    function test3() constant returns (uint x) {\n        uint n = 4;\n        return n+x; // Will return 4\n    }\n}",
        "TokenSale.sol": "pragma solidity 0.4.24;\n\ncontract Tokensale {\n    uint hardcap = 10000 ether;\n\n    function Tokensale() {}\n\n    function fetchCap() public constant returns(uint) {\n        return hardcap;\n    }\n}\n\ncontract Presale is Tokensale {\n    uint hardcap = 1000 ether;\n\n    function Presale() Tokensale() {}\n}",
        "TokenSale_fixed.sol": "pragma solidity 0.4.25;\n\n//We fix the problem by eliminating the declaration which overrides the prefered hardcap.\n\ncontract Tokensale {\n    uint public hardcap = 10000 ether;\n\n    function Tokensale() {}\n\n    function fetchCap() public constant returns(uint) {\n        return hardcap;\n    }\n}\n\ncontract Presale is Tokensale {\n    //uint hardcap = 1000 ether;\n    //If the hardcap variables were both needed we would have to rename one to fix this.\n    function Presale() Tokensale() {\n        hardcap = 1000 ether; //We set the hardcap from the constructor for the Tokensale to be 1000 instead of 10000\n    }\n}"
    },
    {
        "id": "SWC-120",
        "description": [
            "Ability to generate random numbers is very helpful in all kinds of applications. One obvious example is gambling DApps, where pseudo-random number generator is used to pick the winner. However, creating a strong enough source of randomness in Ethereum is very challenging. For example, use of `block.timestamp` is insecure, as a miner can choose to provide any timestamp within a few seconds and still get his block accepted by others. Use of `blockhash`, `block.difficulty` and other fields is also insecure, as they're controlled by the miner. If the stakes are high, the miner can mine lots of blocks in a short time by renting hardware, pick the block that has required block hash for him to win, and drop all others."
        ],
        "guess_the_random_number.sol": "/*\n * @source: https://capturetheether.com/challenges/lotteries/guess-the-random-number/\n * @author: Steve Marx\n */\n\npragma solidity ^0.4.21;\n\ncontract GuessTheRandomNumberChallenge {\n    uint8 answer;\n\n    function GuessTheRandomNumberChallenge() public payable {\n        require(msg.value == 1 ether);\n        answer = uint8(keccak256(block.blockhash(block.number - 1), now));\n    }\n\n    function isComplete() public view returns (bool) {\n        return address(this).balance == 0;\n    }\n\n    function guess(uint8 n) public payable {\n        require(msg.value == 1 ether);\n\n        if (n == answer) {\n            msg.sender.transfer(2 ether);\n        }\n    }\n}",
        "guess_the_random_number_fixed.sol": "/*\n * @source: https://capturetheether.com/challenges/lotteries/guess-the-random-number/\n * @author: Steve Marx\n */\n\npragma solidity ^0.4.25;\n\ncontract GuessTheRandomNumberChallenge {\n    uint8 answer;\n    uint8 commitedGuess;\n    uint commitBlock;\n    address guesser;\n\n    function GuessTheRandomNumberChallenge() public payable {\n        require(msg.value == 1 ether);\n    }\n\n    function isComplete() public view returns (bool) {\n        return address(this).balance == 0;\n    }\n\n    //Guess the modulo of the blockhash 20 blocks from your guess\n    function guess(uint8 _guess) public payable {\n        require(msg.value == 1 ether);\n        commitedGuess = _guess;\n        commitBlock = block.number;\n        guesser = msg.sender;\n    }\n    function recover() public {\n      //This must be called after the guessed block and before commitBlock+20's blockhash is unrecoverable\n      require(block.number > commitBlock + 20 && commitBlock+20 > block.number - 256);\n      require(guesser == msg.sender);\n\n      if(uint(blockhash(commitBlock+20)) == commitedGuess){\n        msg.sender.transfer(2 ether);\n      }\n    }\n}",
        "old_blockhash.sol": "pragma solidity ^0.4.24;\n\n//Based on the the Capture the Ether challange at https://capturetheether.com/challenges/lotteries/predict-the-block-hash/\n//Note that while it seems to have a 1/2^256 chance you guess the right hash, actually blockhash returns zero for blocks numbers that are more than 256 blocks ago so you can guess zero and wait.\ncontract PredictTheBlockHashChallenge {\n\n    struct guess{\n      uint block;\n      bytes32 guess;\n    }\n\n    mapping(address => guess) guesses;\n\n    constructor() public payable {\n        require(msg.value == 1 ether);\n    }\n\n    function lockInGuess(bytes32 hash) public payable {\n        require(guesses[msg.sender].block == 0);\n        require(msg.value == 1 ether);\n\n        guesses[msg.sender].guess = hash;\n        guesses[msg.sender].block  = block.number + 1;\n    }\n\n    function settle() public {\n        require(block.number > guesses[msg.sender].block);\n\n        bytes32 answer = blockhash(guesses[msg.sender].block);\n\n        guesses[msg.sender].block = 0;\n        if (guesses[msg.sender].guess == answer) {\n            msg.sender.transfer(2 ether);\n        }\n    }\n}",
        "old_blockhash_fixed.sol": "pragma solidity ^0.4.24;\n\n//Based on the the Capture the Ether challange at https://capturetheether.com/challenges/lotteries/predict-the-block-hash/\n//Note that while it seems to have a 1/2^256 chance you guess the right hash, actually blockhash returns zero for blocks numbers that are more than 256 blocks ago so you can guess zero and wait.\ncontract PredictTheBlockHashChallenge {\n\n    struct guess{\n      uint block;\n      bytes32 guess;\n    }\n\n    mapping(address => guess) guesses;\n\n    constructor() public payable {\n        require(msg.value == 1 ether);\n    }\n\n    function lockInGuess(bytes32 hash) public payable {\n        require(guesses[msg.sender].block == 0);\n        require(msg.value == 1 ether);\n\n        guesses[msg.sender].guess = hash;\n        guesses[msg.sender].block  = block.number + 1;\n    }\n\n    function settle() public {\n        require(block.number > guesses[msg.sender].block +10);\n        //Note that this solution prevents the attack where blockhash(guesses[msg.sender].block) is zero\n        //Also we add ten block cooldown period so that a minner cannot use foreknowlege of next blockhashes\n        if(guesses[msg.sender].block - block.number < 256){\n          bytes32 answer = blockhash(guesses[msg.sender].block);\n\n          guesses[msg.sender].block = 0;\n          if (guesses[msg.sender].guess == answer) {\n              msg.sender.transfer(2 ether);\n          }\n        }\n        else{\n          revert(\"Sorry your lottery ticket has expired\");\n        }\n    }\n}",
        "random_number_generator.sol": "pragma solidity ^0.4.25;\n\n// Based on TheRun contract deployed at 0xcac337492149bDB66b088bf5914beDfBf78cCC18.\ncontract RandomNumberGenerator {\n  uint256 private salt =  block.timestamp;\n\n  function random(uint max) view private returns (uint256 result) {\n    // Get the best seed for randomness\n    uint256 x = salt * 100 / max;\n    uint256 y = salt * block.number / (salt % 5);\n    uint256 seed = block.number / 3 + (salt % 300) + y;\n    uint256 h = uint256(blockhash(seed));\n    // Random number between 1 and max\n    return uint256((h / x)) % max + 1;\n  }\n}"
    },
    {
        "id": "SWC-121",
        "description": [
            "It is sometimes necessary to perform signature verification in smart contracts to achieve better usability or to save gas cost. A secure implementation needs to protect against Signature Replay Attacks by for example keeping track of all processed message hashes and only allowing new message hashes to be processed. A malicious user could attack a contract without such a control and get message hash that was sent by another user processed multiple times."
        ]
    },
    {
        "id": "SWC-122",
        "description": [
            "It is a common pattern for smart contract systems to allow users to sign messages off-chain instead of directly requesting users to do an on-chain transaction because of the flexibility and increased transferability that this provides. Smart contract systems that process signed messages have to implement their own logic to recover the authenticity from the signed messages before they process them further. A limitation for such systems is that smart contracts can not directly interact with them because they can not sign messages. Some signature verification implementations attempt to solve this problem by assuming the validity of a signed message based on other methods that do not have this limitation. An example of such a method is to rely on `msg.sender` and assume that if a signed message originated from the sender address then it has also been created by the sender address. This can lead to vulnerabilities especially in scenarios where proxies can be used to relay transactions."
        ]
    },
    {
        "id": "SWC-123",
        "description": [
            "The Solidity `require()` construct is meant to validate external inputs of a function. In most cases, such external inputs are provided by callers, but they may also be returned by callees. In the former case, we refer to them as precondition violations. Violations of a requirement can indicate one of two possible issues:\n\n1. A bug exists in the contract that provided the external input.\n1. The condition used to express the requirement is too strong."
        ],
        "requirement_simple.sol": "pragma solidity ^0.4.25;\n\ncontract Bar {\n    Foo private f = new Foo();\n    function doubleBaz() public view returns (int256) {\n        return 2 * f.baz(0);\n    }\n}\n\ncontract Foo {\n    function baz(int256 x) public pure returns (int256) {\n        require(0 < x);\n        return 42;\n    }\n}",
        "requirement_simple_fixed.sol": "pragma solidity ^0.4.25;\n\ncontract Bar {\n    Foo private f = new Foo();\n    function doubleBaz() public view returns (int256) {\n        return 2 * f.baz(1); //Changes the external contract to not hit the overly strong requirement.\n    }\n}\n\ncontract Foo {\n    function baz(int256 x) public pure returns (int256) {\n        require(0 < x); //You can also fix the contract by changing the input to the uint type and removing the require\n        return 42;\n    }\n}"
    },
    {
        "id": "SWC-124",
        "description": [
            "A smart contract's data (e.g., storing the owner of the contract) is persistently stored\nat some storage location (i.e., a key or address) on the EVM level. The contract is\nresponsible for ensuring that only authorized user or contract accounts may write to\nsensitive storage locations. If an attacker is able to write to arbitrary storage\nlocations of a contract, the authorization checks may easily be circumvented. This can\nallow an attacker to corrupt the storage; for instance, by overwriting a field that stores\nthe address of the contract owner."
        ],
        "arbitrary_location_write_simple.sol": "pragma solidity ^0.4.25;\n\ncontract Wallet {\n    uint[] private bonusCodes;\n    address private owner;\n\n    constructor() public {\n        bonusCodes = new uint[](0);\n        owner = msg.sender;\n    }\n\n    function () public payable {\n    }\n\n    function PushBonusCode(uint c) public {\n        bonusCodes.push(c);\n    }\n\n    function PopBonusCode() public {\n        require(0 <= bonusCodes.length);\n        bonusCodes.length--;\n    }\n\n    function UpdateBonusCodeAt(uint idx, uint c) public {\n        require(idx < bonusCodes.length);\n        bonusCodes[idx] = c;\n    }\n\n    function Destroy() public {\n        require(msg.sender == owner);\n        selfdestruct(msg.sender);\n    }\n}",
        "arbitrary_location_write_simple_fixed.sol": "pragma solidity ^0.4.25;\n\ncontract Wallet {\n    uint[] private bonusCodes;\n    address private owner;\n\n    constructor() public {\n        bonusCodes = new uint[](0);\n        owner = msg.sender;\n    }\n\n    function () public payable {\n    }\n\n    function PushBonusCode(uint c) public {\n        bonusCodes.push(c);\n    }\n\n    function PopBonusCode() public {\n        require(0 < bonusCodes.length);\n        bonusCodes.length--;\n    }\n\n    function UpdateBonusCodeAt(uint idx, uint c) public {\n        require(idx < bonusCodes.length); //Since you now have to push very codes this is no longer an arbitray write.\n        bonusCodes[idx] = c;\n    }\n\n    function Destroy() public {\n        require(msg.sender == owner);\n        selfdestruct(msg.sender);\n    }\n}",
        "mapping_write.sol": "pragma solidity ^0.4.24;\n\n//This code is derived from the Capture the Ether https://capturetheether.com/challenges/math/mapping/\n\ncontract Map {\n    address public owner;\n    uint256[] map;\n\n    function set(uint256 key, uint256 value) public {\n        if (map.length <= key) {\n            map.length = key + 1;\n        }\n\n        map[key] = value;\n    }\n\n    function get(uint256 key) public view returns (uint256) {\n        return map[key];\n    }\n    function withdraw() public{\n      require(msg.sender == owner);\n      msg.sender.transfer(address(this).balance);\n    }\n}"
    },
    {
        "id": "SWC-125",
        "description": [
            "Solidity supports multiple inheritance, meaning that one contract can inherit several contracts. Multiple inheritance introduces ambiguity called [Diamond Problem](https://en.wikipedia.org/wiki/Multiple_inheritance#The_diamond_problem): if two or more base contracts define the same function, which one should be called in the child contract? Solidity deals with this ambiguity by using reverse [C3 Linearization](https://en.wikipedia.org/wiki/C3_linearization), which sets a priority between base contracts.\n\nThat way, base contracts have different priorities, so the order of inheritance matters. Neglecting inheritance order can lead to unexpected behavior."
        ],
        "MDTCrowdsale.sol": "/*\n * @source: https://github.com/Arachnid/uscc/blob/master/submissions-2017/philipdaian/MDTCrowdsale.sol\n * @author: Philip Daian\n */\n\npragma solidity ^0.4.25;\n\n//import \"https://github.com/OpenZeppelin/openzeppelin-solidity/contracts/math/SafeMath.sol\";\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that revert on error\n */\nlibrary SafeMath {\n    /**\n    * @dev Multiplies two numbers, reverts on overflow.\n    */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b);\n\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n    */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n    * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n    * @dev Adds two numbers, reverts on overflow.\n    */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a);\n\n        return c;\n    }\n\n    /**\n    * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\n    * reverts when dividing by zero.\n    */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0);\n        return a % b;\n    }\n}\n\n//import \"https://github.com/OpenZeppelin/openzeppelin-solidity/contracts/token/ERC20/ERC20Mintable.sol\";\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ninterface IERC20 {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address who) external view returns (uint256);\n\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    function transfer(address to, uint256 value) external returns (bool);\n\n    function approve(address spender, uint256 value) external returns (bool);\n\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\n * Originally based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n *\n * This implementation emits additional Approval events, allowing applications to reconstruct the allowance status for\n * all accounts just by listening to said events. Note that this isn't required by the specification, and other\n * compliant implementations may not do it.\n */\ncontract ERC20 is IERC20 {\n    using SafeMath for uint256;\n\n    mapping (address => uint256) private _balances;\n\n    mapping (address => mapping (address => uint256)) private _allowed;\n\n    uint256 private _totalSupply;\n\n    /**\n    * @dev Total number of tokens in existence\n    */\n    function totalSupply() public view returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n    * @dev Gets the balance of the specified address.\n    * @param owner The address to query the balance of.\n    * @return An uint256 representing the amount owned by the passed address.\n    */\n    function balanceOf(address owner) public view returns (uint256) {\n        return _balances[owner];\n    }\n\n    /**\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n     * @param owner address The address which owns the funds.\n     * @param spender address The address which will spend the funds.\n     * @return A uint256 specifying the amount of tokens still available for the spender.\n     */\n    function allowance(address owner, address spender) public view returns (uint256) {\n        return _allowed[owner][spender];\n    }\n\n    /**\n    * @dev Transfer token for a specified address\n    * @param to The address to transfer to.\n    * @param value The amount to be transferred.\n    */\n    function transfer(address to, uint256 value) public returns (bool) {\n        _transfer(msg.sender, to, value);\n        return true;\n    }\n\n    /**\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     * @param spender The address which will spend the funds.\n     * @param value The amount of tokens to be spent.\n     */\n    function approve(address spender, uint256 value) public returns (bool) {\n        require(spender != address(0));\n\n        _allowed[msg.sender][spender] = value;\n        emit Approval(msg.sender, spender, value);\n        return true;\n    }\n\n    /**\n     * @dev Transfer tokens from one address to another.\n     * Note that while this function emits an Approval event, this is not required as per the specification,\n     * and other compliant implementations may not emit the event.\n     * @param from address The address which you want to send tokens from\n     * @param to address The address which you want to transfer to\n     * @param value uint256 the amount of tokens to be transferred\n     */\n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\n        _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\n        _transfer(from, to, value);\n        emit Approval(from, msg.sender, _allowed[from][msg.sender]);\n        return true;\n    }\n\n    /**\n     * @dev Increase the amount of tokens that an owner allowed to a spender.\n     * approve should be called when allowed_[_spender] == 0. To increment\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     * Emits an Approval event.\n     * @param spender The address which will spend the funds.\n     * @param addedValue The amount of tokens to increase the allowance by.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n        require(spender != address(0));\n\n        _allowed[msg.sender][spender] = _allowed[msg.sender][spender].add(addedValue);\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n        return true;\n    }\n\n    /**\n     * @dev Decrease the amount of tokens that an owner allowed to a spender.\n     * approve should be called when allowed_[_spender] == 0. To decrement\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     * Emits an Approval event.\n     * @param spender The address which will spend the funds.\n     * @param subtractedValue The amount of tokens to decrease the allowance by.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n        require(spender != address(0));\n\n        _allowed[msg.sender][spender] = _allowed[msg.sender][spender].sub(subtractedValue);\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n        return true;\n    }\n\n    /**\n    * @dev Transfer token for a specified addresses\n    * @param from The address to transfer from.\n    * @param to The address to transfer to.\n    * @param value The amount to be transferred.\n    */\n    function _transfer(address from, address to, uint256 value) internal {\n        require(to != address(0));\n\n        _balances[from] = _balances[from].sub(value);\n        _balances[to] = _balances[to].add(value);\n        emit Transfer(from, to, value);\n    }\n\n    /**\n     * @dev Internal function that mints an amount of the token and assigns it to\n     * an account. This encapsulates the modification of balances such that the\n     * proper events are emitted.\n     * @param account The account that will receive the created tokens.\n     * @param value The amount that will be created.\n     */\n    function _mint(address account, uint256 value) internal {\n        require(account != address(0));\n\n        _totalSupply = _totalSupply.add(value);\n        _balances[account] = _balances[account].add(value);\n        emit Transfer(address(0), account, value);\n    }\n\n    /**\n     * @dev Internal function that burns an amount of the token of a given\n     * account.\n     * @param account The account whose tokens will be burnt.\n     * @param value The amount that will be burnt.\n     */\n    function _burn(address account, uint256 value) internal {\n        require(account != address(0));\n\n        _totalSupply = _totalSupply.sub(value);\n        _balances[account] = _balances[account].sub(value);\n        emit Transfer(account, address(0), value);\n    }\n\n    /**\n     * @dev Internal function that burns an amount of the token of a given\n     * account, deducting from the sender's allowance for said account. Uses the\n     * internal burn function.\n     * Emits an Approval event (reflecting the reduced allowance).\n     * @param account The account whose tokens will be burnt.\n     * @param value The amount that will be burnt.\n     */\n    function _burnFrom(address account, uint256 value) internal {\n        _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(value);\n        _burn(account, value);\n        emit Approval(account, msg.sender, _allowed[account][msg.sender]);\n    }\n}\n\n/**\n * @title Roles\n * @dev Library for managing addresses assigned to a Role.\n */\nlibrary Roles {\n    struct Role {\n        mapping (address => bool) bearer;\n    }\n\n    /**\n     * @dev give an account access to this role\n     */\n    function add(Role storage role, address account) internal {\n        require(account != address(0));\n        require(!has(role, account));\n\n        role.bearer[account] = true;\n    }\n\n    /**\n     * @dev remove an account's access to this role\n     */\n    function remove(Role storage role, address account) internal {\n        require(account != address(0));\n        require(has(role, account));\n\n        role.bearer[account] = false;\n    }\n\n    /**\n     * @dev check if an account has this role\n     * @return bool\n     */\n    function has(Role storage role, address account) internal view returns (bool) {\n        require(account != address(0));\n        return role.bearer[account];\n    }\n}\n\ncontract MinterRole {\n    using Roles for Roles.Role;\n\n    event MinterAdded(address indexed account);\n    event MinterRemoved(address indexed account);\n\n    Roles.Role private _minters;\n\n    constructor () internal {\n        _addMinter(msg.sender);\n    }\n\n    modifier onlyMinter() {\n        require(isMinter(msg.sender));\n        _;\n    }\n\n    function isMinter(address account) public view returns (bool) {\n        return _minters.has(account);\n    }\n\n    function addMinter(address account) public onlyMinter {\n        _addMinter(account);\n    }\n\n    function renounceMinter() public {\n        _removeMinter(msg.sender);\n    }\n\n    function _addMinter(address account) internal {\n        _minters.add(account);\n        emit MinterAdded(account);\n    }\n\n    function _removeMinter(address account) internal {\n        _minters.remove(account);\n        emit MinterRemoved(account);\n    }\n}\n\n/**\n * @title ERC20Mintable\n * @dev ERC20 minting logic\n */\ncontract ERC20Mintable is ERC20, MinterRole {\n    /**\n     * @dev Function to mint tokens\n     * @param to The address that will receive the minted tokens.\n     * @param value The amount of tokens to mint.\n     * @return A boolean that indicates if the operation was successful.\n     */\n    function mint(address to, uint256 value) public onlyMinter returns (bool) {\n        _mint(to, value);\n        return true;\n    }\n}\n/**\n * @title Crowdsale\n * @dev Crowdsale is a base contract for managing a token crowdsale.\n * Crowdsales have a start and end block, where investors can make\n * token purchases and the crowdsale will assign them tokens based\n * on a token per ETH rate. Funds collected are forwarded to a wallet\n * as they arrive.\n */\ncontract Crowdsale {\n    using SafeMath for uint256;\n\n    // The token being sold\n    ERC20Mintable public token;\n\n    // start and end block where investments are allowed (both inclusive)\n    uint256 public startBlock;\n    uint256 public endBlock;\n\n    // address where funds are collected\n    address public wallet;\n\n    // how many token units a buyer gets per wei\n    uint256 public rate;\n\n    // amount of raised money in wei\n    uint256 public weiRaised;\n\n    /**\n    * event for token purchase logging\n    * @param purchaser who paid for the tokens\n    * @param beneficiary who got the tokens\n    * @param value weis paid for purchase\n    * @param amount amount of tokens purchased\n    */\n    event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n\n    function Crowdsale(uint256 _startBlock, uint256 _endBlock, uint256 _rate, address _wallet) {\n        require(_startBlock >= block.number);\n        require(_endBlock >= _startBlock);\n        require(_rate > 0);\n        require(_wallet != 0x0);\n\n        token = createTokenContract();\n        startBlock = _startBlock;\n        endBlock = _endBlock;\n        rate = _rate;\n        wallet = _wallet;\n    }\n\n    // creates the token to be sold.\n    // override this method to have crowdsale of a specific mintable token.\n    function createTokenContract() internal returns (ERC20Mintable) {\n        return new ERC20Mintable();\n    }\n\n\n    // fallback function can be used to buy tokens\n    function () payable {\n        buyTokens(msg.sender);\n    }\n\n    // low level token purchase function\n    function buyTokens(address beneficiary) payable {\n        require(beneficiary != 0x0);\n        require(validPurchase());\n\n        uint256 weiAmount = msg.value;\n\n        // calculate token amount to be created\n        uint256 tokens = weiAmount.mul(rate);\n\n        // update state\n        weiRaised = weiRaised.add(weiAmount);\n\n        token.mint(beneficiary, tokens);\n        TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\n\n        forwardFunds();\n    }\n\n    // send ether to the fund collection wallet\n    // override to create custom fund forwarding mechanisms\n    function forwardFunds() internal {\n        wallet.transfer(msg.value);\n    }\n\n    // @return true if the transaction can buy tokens\n    function validPurchase() internal constant returns (bool) {\n        uint256 current = block.number;\n        bool withinPeriod = current >= startBlock && current <= endBlock;\n        bool nonZeroPurchase = msg.value != 0;\n        return withinPeriod && nonZeroPurchase;\n    }\n\n    // @return true if crowdsale event has ended\n    function hasEnded() public constant returns (bool) {\n        return block.number > endBlock;\n    }\n}\n\n/**\n * @title CappedCrowdsale\n * @dev Extension of Crowsdale with a max amount of funds raised\n */\n contract CappedCrowdsale is Crowdsale {\n    using SafeMath for uint256;\n    uint256 public cap;\n\n    function CappedCrowdsale(uint256 _cap) {\n        require(_cap > 0);\n        cap = _cap;\n    }\n\n    // overriding Crowdsale#validPurchase to add extra cap logic\n    // @return true if investors can buy at the moment\n    function validPurchase() internal constant returns (bool) {\n        bool withinCap = weiRaised.add(msg.value) <= cap;\n        return super.validPurchase() && withinCap;\n    }\n\n    // overriding Crowdsale#hasEnded to add cap logic\n    // @return true if crowdsale event has ended\n    function hasEnded() public constant returns (bool) {\n        bool capReached = weiRaised >= cap;\n        return super.hasEnded() || capReached;\n    }\n}\n\n/**\n * @title WhitelistedCrowdsale\n * @dev Extension of Crowsdale with a whitelist of investors that\n * can buy before the start block\n */\ncontract WhitelistedCrowdsale is Crowdsale {\n    using SafeMath for uint256;\n\n    mapping (address => bool) public whitelist;\n\n    function addToWhitelist(address addr) {\n        require(msg.sender != address(this));\n        whitelist[addr] = true;\n    }\n\n    // overriding Crowdsale#validPurchase to add extra whitelit logic\n    // @return true if investors can buy at the moment\n    function validPurchase() internal constant returns (bool) {\n        return super.validPurchase() || (whitelist[msg.sender] && !hasEnded());\n    }\n\n}\n\ncontract MDTCrowdsale is CappedCrowdsale, WhitelistedCrowdsale {\n\n    function MDTCrowdsale()\n    CappedCrowdsale(50000000000000000000000)\n    Crowdsale(block.number, block.number + 100000, 1, msg.sender) { // Wallet is the contract creator, to whom funds will be sent\n        addToWhitelist(msg.sender);\n        addToWhitelist(0x0d5bda9db5dd36278c6a40683960ba58cac0149b);\n        addToWhitelist(0x1b6ddc637c24305b354d7c337f9126f68aad4886);\n    }\n\n}"
    },
    {
        "id": "SWC-126",
        "description": [
            "Insufficient gas griefing attacks can be performed on contracts which accept data and use it in a sub-call on another contract. If the sub-call fails, either the whole transaction is reverted, or execution is continued. In the case of a relayer contract, the user who executes the transaction, the 'forwarder', can effectively censor transactions by using just enough gas to execute the transaction, but not enough for the sub-call to succeed."
        ],
        "relayer.sol": "/*\n * @source: https://consensys.github.io/smart-contract-best-practices/known_attacks/#insufficient-gas-griefing\n * @author: ConsenSys Diligence\n * Modified by Kaden Zipfel\n */\n\npragma solidity ^0.5.0;\n\ncontract Relayer {\n    uint transactionId;\n\n    struct Tx {\n        bytes data;\n        bool executed;\n    }\n\n    mapping (uint => Tx) transactions;\n\n    function relay(Target target, bytes memory _data) public returns(bool) {\n        // replay protection; do not call the same transaction twice\n        require(transactions[transactionId].executed == false, 'same transaction twice');\n        transactions[transactionId].data = _data;\n        transactions[transactionId].executed = true;\n        transactionId += 1;\n\n        (bool success, ) = address(target).call(abi.encodeWithSignature(\"execute(bytes)\", _data));\n        return success;\n    }\n}\n\n// Contract called by Relayer\ncontract Target {\n    function execute(bytes memory _data) public {\n        // Execute contract code\n    }\n}",
        "relayer_fixed.sol": "/*\n * @source: https://consensys.github.io/smart-contract-best-practices/known_attacks/#insufficient-gas-griefing\n * @author: ConsenSys Diligence\n * Modified by Kaden Zipfel\n */\n\npragma solidity ^0.5.0;\n\ncontract Relayer {\n    uint transactionId;\n\n    struct Tx {\n        bytes data;\n        bool executed;\n    }\n\n    mapping (uint => Tx) transactions;\n\n    function relay(Target target, bytes memory _data, uint _gasLimit) public {\n        // replay protection; do not call the same transaction twice\n        require(transactions[transactionId].executed == false, 'same transaction twice');\n        transactions[transactionId].data = _data;\n        transactions[transactionId].executed = true;\n        transactionId += 1;\n\n        address(target).call(abi.encodeWithSignature(\"execute(bytes)\", _data, _gasLimit));\n    }\n}\n\n// Contract called by Relayer\ncontract Target {\n    function execute(bytes memory _data, uint _gasLimit) public {\n        require(gasleft() >= _gasLimit, 'not enough gas');\n        // Execute contract code\n    }\n}"
    },
    {
        "id": "SWC-127",
        "description": [
            "Solidity supports function types. That is, a variable of function type can be assigned with a reference to a function with a matching signature. The function saved to such variable can be called just like a regular function.\n\nThe problem arises when a user has the ability to arbitrarily change the function type variable and thus execute random code instructions. As Solidity doesn't support pointer arithmetics, it's impossible to change such variable to an arbitrary value. However, if the developer uses assembly instructions, such as `mstore` or assign operator, in the worst case scenario an attacker is able to point a function type variable to any code instruction, violating required validations and required state changes."
        ],
        "FunctionTypes.sol": "/*\n * @source: https://gist.github.com/wadeAlexC/7a18de852693b3f890560ab6a211a2b8\n * @author: Alexander Wade\n */\n\npragma solidity ^0.4.25;\n\ncontract FunctionTypes {\n\n    constructor() public payable { require(msg.value != 0); }\n\n    function withdraw() private {\n        require(msg.value == 0, 'dont send funds!');\n        address(msg.sender).transfer(address(this).balance);\n    }\n\n    function frwd() internal\n        { withdraw(); }\n\n    struct Func { function () internal f; }\n\n    function breakIt() public payable {\n        require(msg.value != 0, 'send funds!');\n        Func memory func;\n        func.f = frwd;\n        assembly { mstore(func, add(mload(func), callvalue)) }\n        func.f();\n    }\n}"
    }
]